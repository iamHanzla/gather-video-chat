[{"/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/index.js":"1","/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/App.js":"2","/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/JoinRoom.js":"3","/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/Room.js":"4","/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/Chat.js":"5"},{"size":267,"mtime":1635933919957,"results":"6","hashOfConfig":"7"},{"size":390,"mtime":1635762790231,"results":"8","hashOfConfig":"7"},{"size":1789,"mtime":1635833449952,"results":"9","hashOfConfig":"7"},{"size":6964,"mtime":1635957927143,"results":"10","hashOfConfig":"7"},{"size":2501,"mtime":1635762790232,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"11jky8c",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/index.js",[],["25","26"],"/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/App.js",[],"/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/JoinRoom.js",["27","28"],"import React, { useState } from \"react\";\nimport \"./JoinRoom.css\";\nimport { v1 as uuid } from \"uuid\";\nimport io from \"socket.io-client\";\nimport e from \"cors\";\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nfunction JoinRoom(props) {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n\n  const joinRoom = (e) => {\n    e.preventDefault();\n    if (name === \"\" || room === \"\") {\n      alert(\"Please enter valid values\");\n      return;\n    }\n\n    document.getElementById(\"input-name\").value = \"\";\n    document.getElementById(\"input-room\").value = \"\";\n\n    props.history.push(`/room/${room}`);\n  };\n\n  const createRoom = (e) => {\n    e.preventDefault();\n    if (name === \"\") {\n      alert(\"Please enter a name\");\n      return;\n    }\n\n    document.getElementById(\"input-name\").value = \"\";\n    document.getElementById(\"input-room\").value = \"\";\n\n    const roomID = uuid();\n    props.history.push(`/room/${roomID}`);\n  };\n\n  return (\n    <div className=\"overAll\">\n      <div className=\"joinRoom\">\n        <h1 className=\"entryTitle\"> Enter Room Details </h1>\n        <input\n          id=\"input-name\"\n          type=\"text\"\n          placeholder=\"Enter Your Name...\"\n          onChange={(e) => setName(e.target.value)}\n        />\n        <input\n          id=\"input-room\"\n          type=\"text\"\n          placeholder=\"Enter Room ID...\"\n          onChange={(e) => setRoom(e.target.value)}\n        />\n        <button className=\"joinBtn\" type=\"submit\" onClick={(e) => joinRoom(e)}>\n          {\" \"}\n          Join a room{\" \"}\n        </button>\n        <div className=\"line\"></div>\n        <button className=\"createBtn\" onClick={(e) => createRoom(e)}>\n          {\" \"}\n          Create new room{\" \"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default JoinRoom;\n","/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/Room.js",["29","30","31","32","33","34","35"],"import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"peerjs\";\nimport \"./Room.css\";\nimport Sketch from \"react-p5\";\nimport styled from \"styled-components\";\nimport Chat from \"./Chat\";\nconst muteBtn = document.querySelector(\".mute\");\nconst cameraBtn = document.querySelector(\".camera\");\nconst screenBtn = document.querySelector(\".screenshare\");\n<script\n  src=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/js/all.min.js\"\n  integrity=\"sha512-cyAbuGborsD25bhT/uz++wPqrh5cqPh1ULJz4NSpN9ktWcA6Hnh9g+CWKeNx2R0fgQt+ybRXdabSBgYXkQTTmA==\"\n  crossorigin=\"anonymous\"\n  referrerpolicy=\"no-referrer\"\n></script>;\nconst socket = io.connect(\"http://localhost:3001\");\n\nconst StyledVideo = styled.video`\n  height: 300px;\n  width: 300px;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current.srcObject = props.peer;\n  }, []);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\n\nfunction Room(props) {\n  const [users, setUsers] = useState([]);\n  const [peers, setPeers] = useState([]);\n  const [connected, setConnected] = useState({});\n  const myVideo = useRef(null);\n  const myPeer = useRef(null);\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n\n  useEffect(() => {\n    socket.emit(\"join room\", roomID);\n    const getUserMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true,\n        });\n        myVideo.current.srcObject = stream;\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getUserMedia();\n\n    const peer = new Peer(socket.id);\n\n    peer.on(\"call\", (call) => {\n      call.answer(myVideo.current.srcObject);\n      call.on(\"stream\", (peerStream) => {\n        peersRef.current.push(peerStream);\n        let temp = peers;\n        temp.push(peerStream);\n        setPeers(temp);\n      });\n    });\n\n    myPeer.current = peer;\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"receive move\", (data) => {\n      setUsers(data.all);\n      for (let i = 0; i < data.all.length; i++) {\n        if (data.all[i].id === data.me.id) {\n          continue;\n        }\n\n        let closer = proximity(data.all[i], data.me);\n\n        if (closer && connected[data.all[i].id] === undefined) {\n          connectPeer(data.all[i], data.me);\n        } else if (!closer && connected[data.all[i].id] !== undefined) {\n          disconnectPeer(data.all[i], data.me);\n        }\n      }\n    });\n  }, [socket]);\n\n  let setup = (p5, canvas) => {\n    let canv = p5.createCanvas(800, 450).parent(canvas);\n    let tempUsers = [];\n    tempUsers.push({\n      id: socket.id,\n      room: roomID,\n      x: 400,\n      y: 100,\n    });\n\n    setUsers(tempUsers);\n  };\n\n  let draw = (p5) => {\n    p5.background(\"rgb(255, 255, 255)\");\n\n    let idx = users.findIndex((user) => user.id === socket.id);\n    if (idx !== -1) {\n      let tempUsers = users;\n\n      if (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n        tempUsers[idx].y = tempUsers[idx].y - 2;\n      }\n      if (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n        tempUsers[idx].x = tempUsers[idx].x - 2;\n      }\n      if (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n        tempUsers[idx].y = tempUsers[idx].y + 2;\n      }\n      if (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n        tempUsers[idx].x = tempUsers[idx].x + 2;\n      }\n\n      let data = {\n        id: socket.id,\n        room: roomID,\n        x: tempUsers[idx].x,\n        y: tempUsers[idx].y,\n      };\n\n      setUsers(tempUsers);\n      socket.emit(\"send move\", data);\n    }\n\n    for (let i = 0; i < users.length; i++) {\n      p5.circle(users[i].x, users[i].y, 16);\n    }\n  };\n\n  const muteUnmute = (e) => {\n    const enabled = myVideo.current.srcObject.getAudioTracks()[0].enabled;\n    if (enabled) {\n      myVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n    } else {\n      myVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n    }\n    const muteBtn = document.querySelector(\".mute\");\n    muteBtn.classList.toggle(\"whitened\");\n  };\n\n  const cameraOnOff = (e) => {\n    const enabled = myVideo.current.srcObject.getVideoTracks()[0].enabled;\n    if (enabled) {\n      myVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n    } else {\n      myVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n    }\n    const cameraBtn = document.querySelector(\".camera\");\n    cameraBtn.classList.toggle(\"cameraOff\");\n  };\n\n  const screenShare = (e) => {\n    const screenBtn = document.querySelector(\".screenshare\");\n    screenBtn.classList.toggle(\"whitened\");\n\n    // TODO\n  };\n\n  const proximity = (user, me) => {\n    if (\n      (user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <=\n      10000\n    ) {\n      if (user.x >= me.x) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const connectPeer = (user, me) => {\n    const call = myPeer.current.call(user.id, myVideo.current.srcObject);\n\n    call.on(\"stream\", (peerStream) => {\n      peersRef.current.push(peerStream);\n      let temp = peers;\n      temp.push(peerStream);\n      setPeers(temp);\n    });\n\n    let temp = connected;\n    temp[user.id] = true;\n    setConnected(temp);\n    return;\n  };\n\n  const disconnectPeer = (user) => {\n    let temp = connected;\n    delete temp[user.id];\n    setConnected(temp);\n    return;\n  };\n\n  return (\n    <div className=\"room\">\n      <div className=\"video-canvas\">\n        <div className=\"videobox\">\n          <div className=\"buttonbox\">\n            <button\n              type=\"button\"\n              className=\"mute\"\n              onClick={(e) => muteUnmute(e)}\n            >\n              {\" \"}\n              <i className=\"fa fa-microphone-slash\"></i>{\" \"}\n            </button>\n            <button\n              type=\"button\"\n              className=\"camera\"\n              onClick={(e) => cameraOnOff(e)}\n            >\n              {\" \"}\n              <i className=\"fa fa-camera\"></i>{\" \"}\n            </button>\n            <button\n              type=\"button\"\n              className=\"screenshare\"\n              onClick={(e) => screenShare(e)}\n            >\n              {\" \"}\n              <i className=\"fa fa-desktop\"></i>{\" \"}\n            </button>\n          </div>\n          <StyledVideo\n            muted\n            ref={myVideo}\n            autoPlay\n            playsInLine\n            className=\"videoElement\"\n          />\n          <div className=\"videos\">\n            {console.log(peers)}\n            {peers.map((peer, idx) => {\n              return idx % 2 === 0 ? (\n                <div>\n                  <Video peer={peer} />\n                </div>\n              ) : (\n                <div></div>\n              );\n            })}\n          </div>\n        </div>\n        <Sketch setup={setup} draw={draw} className=\"canvas\" />\n      </div>\n      <Chat className=\"chat\" socket={socket} room={roomID} />\n    </div>\n  );\n}\n\nexport default Room;\n","/Users/hanzla/Desktop/Gather Town/gather-video-chat/client/src/Chat.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":9},{"ruleId":"40","severity":1,"message":"44","line":7,"column":7,"nodeType":"42","messageId":"43","endLine":7,"endColumn":13},{"ruleId":"40","severity":1,"message":"45","line":8,"column":7,"nodeType":"42","messageId":"43","endLine":8,"endColumn":14},{"ruleId":"40","severity":1,"message":"46","line":9,"column":7,"nodeType":"42","messageId":"43","endLine":9,"endColumn":16},{"ruleId":"40","severity":1,"message":"47","line":10,"column":7,"nodeType":"42","messageId":"43","endLine":10,"endColumn":16},{"ruleId":"48","severity":1,"message":"49","line":29,"column":6,"nodeType":"50","endLine":29,"endColumn":8,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":72,"column":6,"nodeType":"50","endLine":72,"endColumn":8,"suggestions":"53"},{"ruleId":"48","severity":1,"message":"54","line":91,"column":6,"nodeType":"50","endLine":91,"endColumn":14,"suggestions":"55"},{"ruleId":"40","severity":1,"message":"56","line":94,"column":9,"nodeType":"42","messageId":"43","endLine":94,"endColumn":13},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'e' is defined but never used.","Identifier","unusedVar","'socket' is assigned a value but never used.","'muteBtn' is assigned a value but never used.","'cameraBtn' is assigned a value but never used.","'screenBtn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.","ArrayExpression",["59"],"React Hook useEffect has missing dependencies: 'peers' and 'roomID'. Either include them or remove the dependency array.",["60"],"React Hook useEffect has missing dependencies: 'connectPeer', 'connected', and 'disconnectPeer'. Either include them or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["61"],"'canv' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [props.peer]",{"range":"68","text":"69"},"Update the dependencies array to be: [peers, roomID]",{"range":"70","text":"71"},"Update the dependencies array to be: [connectPeer, connected, disconnectPeer]",{"range":"72","text":"73"},[915,917],"[props.peer]",[1975,1977],"[peers, roomID]",[2512,2520],"[connectPeer, connected, disconnectPeer]"]