{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/gather-video-chat/client/src/Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport Chat from './Chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\nconst StyledVideo = styled.video`\n    height: 300px;\n    width: 300px;\n`;\n_c = StyledVideo;\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StyledVideo, {\n    playsInline: true,\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c2 = Video;\n\nfunction Room(props) {\n  _s2();\n\n  const [peers, setPeers] = useState([]);\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      socket.emit(\"join room\", roomID);\n      socket.on(\"all users\", users => {\n        const peers = [];\n        users.forEach(userID => {\n          const peer = createPeer(userID, socket.id, stream);\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peers.push(peer);\n        });\n        setPeers(peers);\n      });\n      socket.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socket.on(\"receiving returned signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        item.peer.signal(payload.signal);\n      });\n    });\n  }, []);\n\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  };\n\n  const addPeer = (incomingSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videobox\",\n      children: [/*#__PURE__*/_jsxDEV(StyledVideo, {\n        muted: true,\n        ref: userVideo,\n        autoPlay: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), peers.map((peer, index) => {\n        return /*#__PURE__*/_jsxDEV(Video, {\n          peer: peer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 22\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      className: \"chatroom\",\n      socket: socket,\n      room: roomID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(Room, \"K3Dn85TFPk9o+c4HITZtDppFNoI=\");\n\n_c3 = Room;\n;\nexport default Room;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledVideo\");\n$RefreshReg$(_c2, \"Video\");\n$RefreshReg$(_c3, \"Room\");","map":{"version":3,"sources":["/Users/shubhamkapoor/gather-video-chat/client/src/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","styled","Chat","socket","connect","StyledVideo","video","Video","props","ref","peer","on","stream","current","srcObject","Room","peers","setPeers","userVideo","peersRef","roomID","match","params","navigator","mediaDevices","getUserMedia","audio","then","emit","users","forEach","userID","createPeer","id","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport Chat from './Chat'\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nconst StyledVideo = styled.video`\n    height: 300px;\n    width: 300px;\n`;\n\nconst Video = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <StyledVideo playsInline autoPlay ref={ ref } />\n    );\n}\n\nfunction Room(props) {\n    const [peers, setPeers] = useState([]);\n    const userVideo = useRef();\n    const peersRef = useRef([]);\n    const roomID = props.match.params.roomID;\n\n    useEffect(() => {\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n            userVideo.current.srcObject = stream;\n\t\t\tsocket.emit(\"join room\", roomID);\n            socket.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socket.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })\n\n            socket.on(\"user joined\", payload => {\n                const peer = addPeer(payload.signal, payload.callerID, stream);\n                peersRef.current.push({\n                    peerID: payload.callerID,\n                    peer,\n                })\n\n                setPeers(users => [...users, peer]);\n            });\n\n            socket.on(\"receiving returned signal\", payload => {\n                const item = peersRef.current.find(p => p.peerID === payload.id);\n                item.peer.signal(payload.signal);\n            });\n        })\n\t\t\n    }, []);\n\n    const createPeer = (userToSignal, callerID, stream) => {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socket.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    const addPeer = (incomingSignal, callerID, stream) => {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socket.emit(\"returning signal\", { signal, callerID })\n        })\n\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n\n    return (\n\t\t<div className=\"room\">\n\t\t\t<div className=\"videobox\">\n            <StyledVideo muted ref={ userVideo } autoPlay playsInline />\n            \t{ peers.map((peer, index) => {\n            \t    return (\n            \t        <Video key={ index } peer={ peer } />\n            \t    );\n            \t})}\n   \t    \t</div>\n\t\t\t<Chat className=\"chatroom\" socket={ socket } room={ roomID } />\n\t\t</div>\n    );\n};\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}