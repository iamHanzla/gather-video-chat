{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/gather-video-chat/server/client/src/Model.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as handpose from '@tensorflow-models/handpose';\nimport './Model.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Model(props) {\n  _s();\n\n  const canvasRef = useRef();\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    if (props.streamRef.current !== undefined && props.streamRef.ccurrent !== null) {\n      const video = props.streamRef.current.srcObject;\n      const videoWidth = video.videoWidth;\n      const videoHeight = video.videoHeight;\n      video.width = videoWidth;\n      video.height = videoHeight;\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n    }\n  };\n\n  runHandpose();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"model\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        height: \"100%\",\n        width: \" 100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Model, \"hw7YJ5TVw+lAu0tRkzoDS8rL7/E=\");\n\n_c = Model;\nexport default Model;\n\nvar _c;\n\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"sources":["/Users/shubhamkapoor/gather-video-chat/server/client/src/Model.js"],"names":["React","useRef","tf","handpose","Model","props","canvasRef","runHandpose","net","load","setInterval","detect","streamRef","current","undefined","ccurrent","video","srcObject","videoWidth","videoHeight","width","height","hand","estimateHands","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B;AACA,OAAO,aAAP;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACrB,QAAMC,SAAS,GAAGL,MAAM,EAAxB;;AAEA,QAAMM,WAAW,GAAG,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAlB;AAEAC,IAAAA,WAAW,CAAC,MAAM;AACjBC,MAAAA,MAAM,CAACH,GAAD,CAAN;AACA,KAFU,EAER,GAFQ,CAAX;AAGA,GAND;;AAQA,QAAMG,MAAM,GAAG,MAAOH,GAAP,IAAe;AAC7B,QAAIH,KAAK,CAACO,SAAN,CAAgBC,OAAhB,KAA4BC,SAA5B,IACHT,KAAK,CAACO,SAAN,CAAgBG,QAAhB,KAA6B,IAD9B,EAEE;AACD,YAAMC,KAAK,GAAGX,KAAK,CAACO,SAAN,CAAgBC,OAAhB,CAAwBI,SAAtC;AACA,YAAMC,UAAU,GAAGF,KAAK,CAACE,UAAzB;AACA,YAAMC,WAAW,GAAGH,KAAK,CAACG,WAA1B;AAEAH,MAAAA,KAAK,CAACI,KAAN,GAAcF,UAAd;AACAF,MAAAA,KAAK,CAACK,MAAN,GAAeF,WAAf;AAEAb,MAAAA,SAAS,CAACO,OAAV,CAAkBO,KAAlB,GAA0BF,UAA1B;AACAZ,MAAAA,SAAS,CAACO,OAAV,CAAkBQ,MAAlB,GAA2BF,WAA3B;AAEA,YAAMG,IAAI,GAAG,MAAMd,GAAG,CAACe,aAAJ,CAAkBP,KAAlB,CAAnB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA;AACD,GAjBD;;AAmBAf,EAAAA,WAAW;AAEX,sBACC;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACC;AACC,MAAA,GAAG,EAAED,SADN;AAEC,MAAA,KAAK,EAAE;AACNe,QAAAA,MAAM,EAAE,MADF;AAELD,QAAAA,KAAK,EAAC;AAFD;AAFR;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAWA;;GA3CQhB,K;;KAAAA,K;AA6CT,eAAeA,KAAf","sourcesContent":["import React, { useRef } from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport * as handpose from '@tensorflow-models/handpose'\nimport './Model.css'\n\nfunction Model(props) {\n\tconst canvasRef = useRef();\n\n\tconst runHandpose = async () => {\n\t\tconst net = await handpose.load();\n\n\t\tsetInterval(() => {\n\t\t\tdetect(net);\n\t\t}, 100)\n\t}\n\n\tconst detect = async (net) => {\n\t\tif (props.streamRef.current !== undefined &&\n\t\t\tprops.streamRef.ccurrent !== null\n\t\t) {\n\t\t\tconst video = props.streamRef.current.srcObject;\n\t\t\tconst videoWidth = video.videoWidth;\n\t\t\tconst videoHeight = video.videoHeight;\n\n\t\t\tvideo.width = videoWidth;\n\t\t\tvideo.height = videoHeight;\n\n\t\t\tcanvasRef.current.width = videoWidth;\n\t\t\tcanvasRef.current.height = videoHeight;\n\n\t\t\tconst hand = await net.estimateHands(video);\n\t\t\tconsole.log(hand);\n\t\t}\n\t}\n\n\trunHandpose();\n\n\treturn (\n\t\t<div className=\"model\">\n\t\t\t<canvas \n\t\t\t\tref={canvasRef}\n\t\t\t\tstyle={{\n\t\t\t\t\theight: \"100%\",\n  \t\t\t\twidth:\" 100%\",\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Model\n"]},"metadata":{},"sourceType":"module"}