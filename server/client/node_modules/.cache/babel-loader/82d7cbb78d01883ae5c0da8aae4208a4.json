{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/gather-video-chat/client/src/Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./Room.css\";\nimport Sketch from 'react-p5';\nimport styled from \"styled-components\";\nimport Chat from './Chat';\nimport RoomSetup from './RoomSetup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\nconst StyledVideo = styled.video`\n    height: 300px;\n    width: 300px;\n`;\n_c = StyledVideo;\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StyledVideo, {\n    playsInline: true,\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c2 = Video;\n\nfunction Room(props) {\n  _s2();\n\n  const [name, setName] = useState(\"\");\n  const [mic, setMic] = useState(true);\n  const [cam, setCam] = useState(true);\n  const [joinedRoom, setJoinedRoom] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [peers, setPeers] = useState([]);\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      socket.emit(\"join room\", roomID);\n      socket.on(\"all users\", users => {\n        const peers = [];\n        users.forEach(userID => {\n          const peer = createPeer(userID, socket.id, stream);\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peers.push(peer);\n        });\n        setPeers(peers);\n      });\n      socket.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socket.on(\"receiving returned signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        item.peer.signal(payload.signal);\n      });\n    });\n  }, []);\n\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  };\n\n  const addPeer = (incomingSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  };\n\n  useEffect(() => {\n    socket.on('receive move', data => {\n      console.log(data);\n      setUsers(data);\n    });\n  }, [socket]);\n\n  const muteUnmute = e => {\n    const enabled = userVideo.current.srcObject.getAudioTracks()[0].enabled;\n\n    if (enabled) {\n      userVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n    } else {\n      userVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n    }\n  };\n\n  const cameraOnOff = e => {\n    const enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n\n    if (enabled) {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n    } else {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n    }\n  };\n\n  const screenShare = e => {};\n\n  const stopScreenShare = () => {};\n\n  const proximity = (user, me) => {\n    if ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  let setup = (p5, canvas) => {\n    let canv = p5.createCanvas(800, 600).parent(canvas);\n    let tempUsers = [];\n    tempUsers.push({\n      id: socket.id,\n      room: roomID,\n      x: 400,\n      y: 100\n    });\n    setUsers(tempUsers);\n  };\n\n  let draw = p5 => {\n    p5.background(\"rgb(255, 255, 255)\");\n    let idx = users.findIndex(user => user.id === socket.id);\n\n    if (idx !== -1) {\n      let tempUsers = users;\n\n      if (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n        tempUsers[idx].y = tempUsers[idx].y - 2;\n      }\n\n      if (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n        tempUsers[idx].x = tempUsers[idx].x - 2;\n      }\n\n      if (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n        tempUsers[idx].y = tempUsers[idx].y + 2;\n      }\n\n      if (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n        tempUsers[idx].x = tempUsers[idx].x + 2;\n      }\n\n      setUsers(tempUsers);\n      let data = {\n        id: socket.id,\n        room: roomID,\n        x: tempUsers[idx].x,\n        y: tempUsers[idx].y\n      };\n      socket.emit('send move', data);\n    }\n\n    for (let i = 0; i < users.length; i++) {\n      p5.circle(users[i].x, users[i].y, 16);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-canvas\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"mute\",\n          onClick: e => muteUnmute(e),\n          children: \" Mute \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"camera\",\n          onClick: e => cameraOnOff(e),\n          children: \" Camera \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"screenshare\",\n          onClick: e => screenShare(e),\n          children: \" ScreenShare \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"videobox\",\n        children: [/*#__PURE__*/_jsxDEV(StyledVideo, {\n          muted: true,\n          ref: userVideo,\n          autoPlay: true,\n          playsInline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 4\n        }, this), peers.map((peer, index) => {\n          return /*#__PURE__*/_jsxDEV(Video, {\n            peer: peer\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 6\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Sketch, {\n        setup: setup,\n        draw: draw,\n        className: \"canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      className: \"chat\",\n      socket: socket,\n      room: roomID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 2\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 1\n  }, this);\n}\n\n_s2(Room, \"QOaSrzpXXrNzsV7qJiFUq5NE2UQ=\");\n\n_c3 = Room;\n;\nexport default Room; // import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import Peer from \"simple-peer\";\n// import \"./Room.css\";\n// import Sketch from 'react-p5';\n// import styled from \"styled-components\";\n// import Chat from \"./Chat\";\n// import RoomSetup from './RoomSetup';\n// const socket = io.connect(\"http://localhost:3001\");\n// const StyledVideo = styled.video`\n// \theight: 300px;\n// \twidth: 300px;\n// `;\n// const Video = (props) => {\n// \tconst ref = useRef();\n// \tuseEffect(() => {\n// \t\tref.current.srcObject = props.peer;\n// \t}, []);\n// \treturn (\n// \t\t\tprops.muted ? (\n// \t\t\t\t<StyledVideo muted playsInline autoPlay ref={ ref } />\n// \t\t\t) : (\n// \t\t\t\t<StyledVideo playsInline autoPlay ref={ ref } />\n// \t\t\t)\n// \t);\n// }\n// function Room(props) {\n// \t\tconst [name, setName] = useState(\"\");\n// \t\tconst [mic, setMic] = useState(true);\n// \t\tconst [cam, setCam] = useState(true);\n// \t\tconst [joinedRoom, setJoinedRoom] = useState(false);\n// \t\tconst [users, setUsers] = useState([]);\n// \t\tconst [peers, setPeers] = useState([]);\n// \t\tconst [connected, setConnected] = useState({});\n// \t\tconst peersRef = useRef([]);\n// \t\tconst myVideo = useRef([]);\n//     const roomID = props.match.params.roomID;\n// \t\tuseEffect(() => {\n// \t\t\tconst getUserMedia = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n// \t\t\t\t\tsocket.emit(\"join room\", roomID);\n// \t\t\t\t\tmyVideo.current.srcObject = stream;\n// \t\t\t\t\tif (!cam) {\n// \t\t\t\t\t\tcameraOnOff();\n// \t\t\t\t\t}\n// \t\t\t\t\tif (!mic) {\n// \t\t\t\t\t\tmuteUnmute();\n// \t\t\t\t\t}\n// \t\t\t\t} catch (err) {\n// \t\t\t\t\tconsole.log(err)\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tgetUserMedia().then(stream => {\n// \t\t\t\tsocket.on(\"all users\", users => {\n// \t\t\t\t\tconst peers = [];\n// \t\t\t\t\tusers.forEach(userID => {\n// \t\t\t\t\t\tconst peer = createPeer(userID, socket.id, stream);\n// \t\t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\tpeers.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t});\n// \t\t\t\t\t})\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\n// \t\t\t\tsocket.on(\"user joined\", payload => {\n// \t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n// \t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t})\n// \t\t\t\t\tconst peerObj = {\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t}\n// \t\t\t\t\tsetPeers(users => [...users, peerObj]);\n// \t\t\t\t});\n// \t\t\t\tsocket.on(\"receiving returned signal\", payload => {\n// \t\t\t\t\tconst item = peersRef.current.find(p => p.peerID === payload.id);\n// \t\t\t\t\titem.peer.signal(payload.signal);\n// \t\t\t\t});\n// \t\t\t\tsocket.on(\"user left\", id => {\n// \t\t\t\t\tconst peerObj = peersRef.current.find(p => p.peerID === id);\n// \t\t\t\t\tif (peerObj) {\n// \t\t\t\t\t\tpeerObj.peer.destroy();\n// \t\t\t\t\t}\n// \t\t\t\t\tconst peers = peersRef.current.filter(p => p.peerID !== id);\n// \t\t\t\t\tpeersRef.current = peers;\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\t\n// \t\t\t});\n// \t\t}, [myVideo.current]);\n// \tuseEffect(() => {\n// \t\tsocket.on('receive move', (data) => {\n// \t\t\tsetUsers(data.all);\n// \t\t\tfor (let i = 0; i < data.all.length; i ++) {\n// \t\t\t\tif (data.all[i].id === data.me.id) {\n// \t\t\t\t\tcontinue;\n// \t\t\t\t}\n// \t\t\t\tlet closer = proximity(data.all[i], data.me)\n// \t\t\t\tif (closer && connected[data.all[i].id] === undefined) {\n// \t\t\t\t\tconnectPeer(data.all[i], data.me);\n// \t\t\t\t} else if (!closer && connected[data.all[i].id] !== undefined) {\n// \t\t\t\t\tdisconnectPeer(data.all[i], data.me);\n// \t\t\t\t}\n// \t\t\t}\n// \t\t})\n// \t}, [socket]);\n// \tconst createPeer = (userToSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: true,\n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('sending signal', { userToSignal, callerID, signal })\n// \t\t})\n// \t\treturn peer;\n// \t}\n// \tconst addPeer = (incomingSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: false, \n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('returning signal', { signal, callerID })\n// \t\t})\n// \t\tpeer.signal(incomingSignal);\n// \t\treturn peer;\n// \t}\n// \tlet setup = (p5, canvas) => {\n// \t\tlet canv = p5.createCanvas(800, 600).parent(canvas);\n// \t\tlet tempUsers = [];\n// \t\ttempUsers.push({\n// \t\t\tid: socket.id,\n// \t\t\troom: roomID,\n// \t\t\tx: 400,\n// \t\t\ty: 100\n// \t\t});\n// \t\tsetUsers(tempUsers);\n// \t}\n// \tlet draw = (p5) => {\n// \t\tp5.background(\"rgb(255, 255, 255)\");\n// \t\tlet idx = users.findIndex((user) => user.id === socket.id)\n// \t\tif (idx !== -1) {\n// \t\t\tlet tempUsers = users;\n// \t\t\tif (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y + 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x + 2;\n// \t\t\t}\t\n// \t\t\tlet data = {\n// \t\t\t\tid: socket.id,\n// \t\t\t\troom: roomID,\n// \t\t\t\tx: tempUsers[idx].x,\n// \t\t\t\ty: tempUsers[idx].y\t\n// \t\t\t}\n// \t\t\tsetUsers(tempUsers);\n// \t\t\tsocket.emit('send move', data);\n// \t\t}\n// \t\tfor (let i = 0; i < users.length; i ++) {\n// \t\t\tp5.circle(users[i].x, users[i].y, 16);\n// \t\t}\n// \t}\n// const muteUnmute = (e) => {\n// \tconst enabled = myVideo.current.stcObject.getAudioTracks()[0].enabled;\n// \tif (enabled) {\n// \t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = false;\t\n// \t} else {\n// \t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n// \t}\n// }\n// const cameraOnOff = (e) => {\n// \tconst enabled = myVideo.current.srcObject.getVideoTracks()[0].enabled;\n// \tif (enabled) {\n// \t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n// \t} else {\n// \t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n// \t}\n// }\n// const screenShare = (e) => {\n// }\n// const stopScreenShare = () => {\n// }\n// const proximity = (user, me) => {\n// \tif ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n// \t\treturn true;\n// \t} else {\n// \t\treturn false;\n// \t}\n// }\n// \tconst connectPeer = (user, me) => {\n// \t\tlet temp = connected;\n// \t\ttemp[user.id] = true;\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n// \tconst disconnectPeer = (user) => {\n// \t\tlet temp = connected;\n// \t\tdelete temp[user.id]\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n// return (\n// \t<div>\n// \t\t{ joinedRoom ? (\n// \t\t\t<div className=\"room\">\n// \t\t\t\t<div className=\"video-canvas\">\n// \t\t\t\t\t<div className=\"videobox\">\n// \t\t\t\t\t\t<div className=\"buttonbox\">\n// \t\t\t\t\t\t\t<button type=\"button\" className=\"mute\" onClick={ (e) => muteUnmute(e) }> Mute </button>\n// \t\t\t\t\t\t\t<button type=\"button\" className=\"camera\" onClick={ (e) => cameraOnOff(e) }> Camera </button>\n// \t\t\t\t\t\t\t<button type=\"button\" className=\"screenshare\" onClick={ (e) => screenShare(e) }> ScreenShare </button>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<StyledVideo muted ref={ myVideo } autoPlay playsInLine />\n// \t\t\t\t\t\t<div className=\"videos\">\n// \t\t\t\t\t\t\t{ peers.map((peer, idx) => {\n// \t\t\t\t\t\t\t\treturn(\n// \t\t\t\t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t\t\t\t{ console.log(peer) }\n// \t\t\t\t\t\t\t\t\t\t<Video peer={ peer.peer } key={ peer.peerID }/>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t)\n// \t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<Sketch setup={ setup } draw={ draw } className=\"canvas\" />\n// \t\t\t\t</div>\n// \t\t\t\t<Chat className=\"chat\" socket={ socket } room={ roomID } name={ name } />\n// \t\t\t</div>\n// \t\t\t) : (\n// \t\t\t\t<RoomSetup \n// \t\t\t\t\tsetJoinedRoom={ () => setJoinedRoom(true) } \n// \t\t\t\t\tsetMic={ preference => setMic(preference) } \n// \t\t\t\t\tsetCam={ preference => setCam(preference) } \n// \t\t\t\t\tsetName={ name => setName(name) }\n// \t\t\t\t/>\n// \t\t\t)\n// \t\t}\n// \t</div>\n// );\n// };\n// export default Room;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledVideo\");\n$RefreshReg$(_c2, \"Video\");\n$RefreshReg$(_c3, \"Room\");","map":{"version":3,"sources":["/Users/shubhamkapoor/gather-video-chat/client/src/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","Sketch","styled","Chat","RoomSetup","socket","connect","StyledVideo","video","Video","props","ref","peer","on","stream","current","srcObject","Room","name","setName","mic","setMic","cam","setCam","joinedRoom","setJoinedRoom","users","setUsers","peers","setPeers","userVideo","peersRef","roomID","match","params","navigator","mediaDevices","getUserMedia","audio","then","emit","forEach","userID","createPeer","id","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","data","console","log","muteUnmute","e","enabled","getAudioTracks","cameraOnOff","getVideoTracks","screenShare","stopScreenShare","proximity","user","me","x","y","setup","p5","canvas","canv","createCanvas","parent","tempUsers","room","draw","background","idx","findIndex","keyIsDown","i","length","circle","map","index"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,MAAM,GAAGN,EAAE,CAACO,OAAH,CAAW,uBAAX,CAAf;AAEA,MAAMC,WAAW,GAAGL,MAAM,CAACM,KAAM;AACjC;AACA;AACA,CAHA;KAAMD,W;;AAKN,MAAME,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACrB,QAAMC,GAAG,GAAGd,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,KAAK,CAACE,IAAN,CAAWC,EAAX,CAAc,QAAd,EAAwBC,MAAM,IAAI;AAC9BH,MAAAA,GAAG,CAACI,OAAJ,CAAYC,SAAZ,GAAwBF,MAAxB;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACI,QAAC,WAAD;AAAa,IAAA,WAAW,MAAxB;AAAyB,IAAA,QAAQ,MAAjC;AAAkC,IAAA,GAAG,EAAGH;AAAxC;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAZD;;GAAMF,K;;MAAAA,K;;AAcN,SAASQ,IAAT,CAAcP,KAAd,EAAqB;AAAA;;AACrB,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACsB,GAAD,EAAMC,MAAN,IAAgBvB,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACwB,GAAD,EAAMC,MAAN,IAAgBzB,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAM,CAAC4B,KAAD,EAAQC,QAAR,IAAoB7B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC8B,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMgC,SAAS,GAAGjC,MAAM,EAAxB;AACA,QAAMkC,QAAQ,GAAGlC,MAAM,CAAC,EAAD,CAAvB;AACA,QAAMmC,MAAM,GAAGtB,KAAK,CAACuB,KAAN,CAAYC,MAAZ,CAAmBF,MAAlC;AAEApC,EAAAA,SAAS,CAAC,MAAM;AACfuC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAE7B,MAAAA,KAAK,EAAE,IAAT;AAAe8B,MAAAA,KAAK,EAAE;AAAtB,KAApC,EAAkEC,IAAlE,CAAuEzB,MAAM,IAAI;AAChFgB,MAAAA,SAAS,CAACf,OAAV,CAAkBC,SAAlB,GAA8BF,MAA9B;AACAT,MAAAA,MAAM,CAACmC,IAAP,CAAY,WAAZ,EAAyBR,MAAzB;AACA3B,MAAAA,MAAM,CAACQ,EAAP,CAAU,WAAV,EAAuBa,KAAK,IAAI;AAC/B,cAAME,KAAK,GAAG,EAAd;AACAF,QAAAA,KAAK,CAACe,OAAN,CAAcC,MAAM,IAAI;AACvB,gBAAM9B,IAAI,GAAG+B,UAAU,CAACD,MAAD,EAASrC,MAAM,CAACuC,EAAhB,EAAoB9B,MAApB,CAAvB;AACAiB,UAAAA,QAAQ,CAAChB,OAAT,CAAiB8B,IAAjB,CAAsB;AACrBC,YAAAA,MAAM,EAAEJ,MADa;AAErB9B,YAAAA;AAFqB,WAAtB;AAIAgB,UAAAA,KAAK,CAACiB,IAAN,CAAWjC,IAAX;AACA,SAPD;AAQAiB,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACA,OAXD;AAaAvB,MAAAA,MAAM,CAACQ,EAAP,CAAU,aAAV,EAAyBkC,OAAO,IAAI;AACnC,cAAMnC,IAAI,GAAGoC,OAAO,CAACD,OAAO,CAACE,MAAT,EAAiBF,OAAO,CAACG,QAAzB,EAAmCpC,MAAnC,CAApB;AACAiB,QAAAA,QAAQ,CAAChB,OAAT,CAAiB8B,IAAjB,CAAsB;AACrBC,UAAAA,MAAM,EAAEC,OAAO,CAACG,QADK;AAErBtC,UAAAA;AAFqB,SAAtB;AAKAiB,QAAAA,QAAQ,CAACH,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWd,IAAX,CAAV,CAAR;AACA,OARD;AAUAP,MAAAA,MAAM,CAACQ,EAAP,CAAU,2BAAV,EAAuCkC,OAAO,IAAI;AACjD,cAAMI,IAAI,GAAGpB,QAAQ,CAAChB,OAAT,CAAiBqC,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACP,MAAF,KAAaC,OAAO,CAACH,EAAhD,CAAb;AACAO,QAAAA,IAAI,CAACvC,IAAL,CAAUqC,MAAV,CAAiBF,OAAO,CAACE,MAAzB;AACA,OAHD;AAIA,KA9BD;AA+BA,GAhCQ,EAgCN,EAhCM,CAAT;;AAkCA,QAAMN,UAAU,GAAG,CAACW,YAAD,EAAeJ,QAAf,EAAyBpC,MAAzB,KAAoC;AACtD,UAAMF,IAAI,GAAG,IAAIZ,IAAJ,CAAS;AACrBuD,MAAAA,SAAS,EAAE,IADU;AAErBC,MAAAA,OAAO,EAAE,KAFY;AAGrB1C,MAAAA;AAHqB,KAAT,CAAb;AAMAF,IAAAA,IAAI,CAACC,EAAL,CAAQ,QAAR,EAAkBoC,MAAM,IAAI;AAC3B5C,MAAAA,MAAM,CAACmC,IAAP,CAAY,gBAAZ,EAA8B;AAAEc,QAAAA,YAAF;AAAgBJ,QAAAA,QAAhB;AAA0BD,QAAAA;AAA1B,OAA9B;AACA,KAFD;AAIA,WAAOrC,IAAP;AACA,GAZD;;AAcA,QAAMoC,OAAO,GAAG,CAACS,cAAD,EAAiBP,QAAjB,EAA2BpC,MAA3B,KAAsC;AACrD,UAAMF,IAAI,GAAG,IAAIZ,IAAJ,CAAS;AACrBuD,MAAAA,SAAS,EAAE,KADU;AAErBC,MAAAA,OAAO,EAAE,KAFY;AAGrB1C,MAAAA;AAHqB,KAAT,CAAb;AAMAF,IAAAA,IAAI,CAACC,EAAL,CAAQ,QAAR,EAAkBoC,MAAM,IAAI;AAC3B5C,MAAAA,MAAM,CAACmC,IAAP,CAAY,kBAAZ,EAAgC;AAAES,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAhC;AACA,KAFD;AAIAtC,IAAAA,IAAI,CAACqC,MAAL,CAAYQ,cAAZ;AAEA,WAAO7C,IAAP;AACA,GAdD;;AAgBAhB,EAAAA,SAAS,CAAC,MAAM;AACfS,IAAAA,MAAM,CAACQ,EAAP,CAAU,cAAV,EAA2B6C,IAAD,IAAU;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA/B,MAAAA,QAAQ,CAAC+B,IAAD,CAAR;AACA,KAHD;AAIA,GALQ,EAKN,CAACrD,MAAD,CALM,CAAT;;AAQA,QAAMwD,UAAU,GAAIC,CAAD,IAAO;AACzB,UAAMC,OAAO,GAAGjC,SAAS,CAACf,OAAV,CAAkBC,SAAlB,CAA4BgD,cAA5B,GAA6C,CAA7C,EAAgDD,OAAhE;;AACA,QAAIA,OAAJ,EAAa;AACZjC,MAAAA,SAAS,CAACf,OAAV,CAAkBC,SAAlB,CAA4BgD,cAA5B,GAA6C,CAA7C,EAAgDD,OAAhD,GAA0D,KAA1D;AACA,KAFD,MAEO;AACNjC,MAAAA,SAAS,CAACf,OAAV,CAAkBC,SAAlB,CAA4BgD,cAA5B,GAA6C,CAA7C,EAAgDD,OAAhD,GAA0D,IAA1D;AACA;AACD,GAPD;;AASA,QAAME,WAAW,GAAIH,CAAD,IAAO;AAC1B,UAAMC,OAAO,GAAGjC,SAAS,CAACf,OAAV,CAAkBC,SAAlB,CAA4BkD,cAA5B,GAA6C,CAA7C,EAAgDH,OAAhE;;AACA,QAAIA,OAAJ,EAAa;AACZjC,MAAAA,SAAS,CAACf,OAAV,CAAkBC,SAAlB,CAA4BkD,cAA5B,GAA6C,CAA7C,EAAgDH,OAAhD,GAA0D,KAA1D;AACA,KAFD,MAEO;AACNjC,MAAAA,SAAS,CAACf,OAAV,CAAkBC,SAAlB,CAA4BkD,cAA5B,GAA6C,CAA7C,EAAgDH,OAAhD,GAA0D,IAA1D;AACA;AACD,GAPD;;AASA,QAAMI,WAAW,GAAIL,CAAD,IAAO,CAE1B,CAFD;;AAIA,QAAMM,eAAe,GAAG,MAAM,CAE7B,CAFD;;AAIA,QAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc;AAC/B,QAAI,CAACD,IAAI,CAACE,CAAL,GAASD,EAAE,CAACC,CAAb,KAAmBF,IAAI,CAACE,CAAL,GAASD,EAAE,CAACC,CAA/B,IAAoC,CAACF,IAAI,CAACG,CAAL,GAASF,EAAE,CAACE,CAAb,KAAmBH,IAAI,CAACG,CAAL,GAASF,EAAE,CAACE,CAA/B,CAApC,IAAyE,KAA7E,EAAoF;AACnF,aAAO,IAAP;AACA,KAFD,MAEO;AACN,aAAO,KAAP;AACA;AACD,GAND;;AAQA,MAAIC,KAAK,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgB;AAC5B,QAAIC,IAAI,GAAGF,EAAE,CAACG,YAAH,CAAgB,GAAhB,EAAqB,GAArB,EAA0BC,MAA1B,CAAiCH,MAAjC,CAAX;AACA,QAAII,SAAS,GAAG,EAAhB;AACAA,IAAAA,SAAS,CAACnC,IAAV,CAAe;AACdD,MAAAA,EAAE,EAAEvC,MAAM,CAACuC,EADG;AAEdqC,MAAAA,IAAI,EAAEjD,MAFQ;AAGdwC,MAAAA,CAAC,EAAE,GAHW;AAIdC,MAAAA,CAAC,EAAE;AAJW,KAAf;AAOA9C,IAAAA,QAAQ,CAACqD,SAAD,CAAR;AACC,GAXD;;AAaA,MAAIE,IAAI,GAAIP,EAAD,IAAQ;AACnBA,IAAAA,EAAE,CAACQ,UAAH,CAAc,oBAAd;AAEA,QAAIC,GAAG,GAAG1D,KAAK,CAAC2D,SAAN,CAAiBf,IAAD,IAAUA,IAAI,CAAC1B,EAAL,KAAYvC,MAAM,CAACuC,EAA7C,CAAV;;AACA,QAAIwC,GAAG,KAAK,CAAC,CAAb,EAAgB;AACf,UAAIJ,SAAS,GAAGtD,KAAhB;;AAEA,UAAIiD,EAAE,CAACW,SAAH,CAAa,EAAb,KAAoBX,EAAE,CAACW,SAAH,CAAa,EAAb,CAAxB,EAA0C;AACzCN,QAAAA,SAAS,CAACI,GAAD,CAAT,CAAeX,CAAf,GAAmBO,SAAS,CAACI,GAAD,CAAT,CAAeX,CAAf,GAAmB,CAAtC;AACA;;AACD,UAAIE,EAAE,CAACW,SAAH,CAAa,EAAb,KAAoBX,EAAE,CAACW,SAAH,CAAa,EAAb,CAAxB,EAA0C;AACzCN,QAAAA,SAAS,CAACI,GAAD,CAAT,CAAeZ,CAAf,GAAmBQ,SAAS,CAACI,GAAD,CAAT,CAAeZ,CAAf,GAAmB,CAAtC;AACA;;AACD,UAAIG,EAAE,CAACW,SAAH,CAAa,EAAb,KAAoBX,EAAE,CAACW,SAAH,CAAa,EAAb,CAAxB,EAA0C;AACzCN,QAAAA,SAAS,CAACI,GAAD,CAAT,CAAeX,CAAf,GAAmBO,SAAS,CAACI,GAAD,CAAT,CAAeX,CAAf,GAAmB,CAAtC;AACA;;AACD,UAAIE,EAAE,CAACW,SAAH,CAAa,EAAb,KAAoBX,EAAE,CAACW,SAAH,CAAa,EAAb,CAAxB,EAA0C;AACzCN,QAAAA,SAAS,CAACI,GAAD,CAAT,CAAeZ,CAAf,GAAmBQ,SAAS,CAACI,GAAD,CAAT,CAAeZ,CAAf,GAAmB,CAAtC;AACA;;AAED7C,MAAAA,QAAQ,CAACqD,SAAD,CAAR;AACA,UAAItB,IAAI,GAAG;AACVd,QAAAA,EAAE,EAAEvC,MAAM,CAACuC,EADD;AAEVqC,QAAAA,IAAI,EAAEjD,MAFI;AAGVwC,QAAAA,CAAC,EAAEQ,SAAS,CAACI,GAAD,CAAT,CAAeZ,CAHR;AAIVC,QAAAA,CAAC,EAAEO,SAAS,CAACI,GAAD,CAAT,CAAeX;AAJR,OAAX;AAMApE,MAAAA,MAAM,CAACmC,IAAP,CAAY,WAAZ,EAAyBkB,IAAzB;AACA;;AACD,SAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7D,KAAK,CAAC8D,MAA1B,EAAkCD,CAAC,EAAnC,EAAwC;AACvCZ,MAAAA,EAAE,CAACc,MAAH,CAAU/D,KAAK,CAAC6D,CAAD,CAAL,CAASf,CAAnB,EAAsB9C,KAAK,CAAC6D,CAAD,CAAL,CAASd,CAA/B,EAAkC,EAAlC;AACA;AACA,GAhCD;;AAkCA,sBACA;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACC;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,MAAhC;AAAuC,UAAA,OAAO,EAAIX,CAAD,IAAOD,UAAU,CAACC,CAAD,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,QAAhC;AAAyC,UAAA,OAAO,EAAIA,CAAD,IAAOG,WAAW,CAACH,CAAD,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,aAAhC;AAA8C,UAAA,OAAO,EAAIA,CAAD,IAAOK,WAAW,CAACL,CAAD,CAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAMC;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACC,QAAC,WAAD;AAAa,UAAA,KAAK,MAAlB;AAAmB,UAAA,GAAG,EAAGhC,SAAzB;AAAqC,UAAA,QAAQ,MAA7C;AAA8C,UAAA,WAAW;AAAzD;AAAA;AAAA;AAAA;AAAA,gBADD,EAEGF,KAAK,CAAC8D,GAAN,CAAU,CAAC9E,IAAD,EAAO+E,KAAP,KAAiB;AAC5B,8BACC,QAAC,KAAD;AAAqB,YAAA,IAAI,EAAG/E;AAA5B,aAAa+E,KAAb;AAAA;AAAA;AAAA;AAAA,kBADD;AAGA,SAJC,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,cAND,eAcC,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAGjB,KAAhB;AAAwB,QAAA,IAAI,EAAGQ,IAA/B;AAAsC,QAAA,SAAS,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cAdD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAiBC,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAuB,MAAA,MAAM,EAAG7E,MAAhC;AAAyC,MAAA,IAAI,EAAG2B;AAAhD;AAAA;AAAA;AAAA;AAAA,YAjBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAqBC;;IA1LQf,I;;MAAAA,I;AA0LR;AAED,eAAeA,IAAfsourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./Room.css\";\nimport Sketch from 'react-p5';\nimport styled from \"styled-components\";\nimport Chat from './Chat';\nimport RoomSetup from './RoomSetup';\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nconst StyledVideo = styled.video`\n    height: 300px;\n    width: 300px;\n`;\n\nconst Video = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <StyledVideo playsInline autoPlay ref={ ref } />\n    );\n}\n\nfunction Room(props) {\nconst [name, setName] = useState(\"\");\nconst [mic, setMic] = useState(true);\nconst [cam, setCam] = useState(true);\nconst [joinedRoom, setJoinedRoom] = useState(false);\n\nconst [users, setUsers] = useState([]);\nconst [peers, setPeers] = useState([]);\nconst userVideo = useRef();\nconst peersRef = useRef([]);\nconst roomID = props.match.params.roomID;\n\nuseEffect(() => {\n\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n\t\tuserVideo.current.srcObject = stream;\n\t\tsocket.emit(\"join room\", roomID);\n\t\tsocket.on(\"all users\", users => {\n\t\t\tconst peers = [];\n\t\t\tusers.forEach(userID => {\n\t\t\t\tconst peer = createPeer(userID, socket.id, stream);\n\t\t\t\tpeersRef.current.push({\n\t\t\t\t\tpeerID: userID,\n\t\t\t\t\tpeer,\n\t\t\t\t})\n\t\t\t\tpeers.push(peer);\n\t\t\t})\n\t\t\tsetPeers(peers);\n\t\t})\n\n\t\tsocket.on(\"user joined\", payload => {\n\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n\t\t\tpeersRef.current.push({\n\t\t\t\tpeerID: payload.callerID,\n\t\t\t\tpeer,\n\t\t\t})\n\n\t\t\tsetPeers(users => [...users, peer]);\n\t\t});\n\n\t\tsocket.on(\"receiving returned signal\", payload => {\n\t\t\tconst item = peersRef.current.find(p => p.peerID === payload.id);\n\t\t\titem.peer.signal(payload.signal);\n\t\t});\n\t})\n}, []);\n\nconst createPeer = (userToSignal, callerID, stream) => {\n\tconst peer = new Peer({\n\t\tinitiator: true,\n\t\ttrickle: false,\n\t\tstream,\n\t});\n\n\tpeer.on(\"signal\", signal => {\n\t\tsocket.emit(\"sending signal\", { userToSignal, callerID, signal })\n\t})\n\n\treturn peer;\n}\n\nconst addPeer = (incomingSignal, callerID, stream) => {\n\tconst peer = new Peer({\n\t\tinitiator: false,\n\t\ttrickle: false,\n\t\tstream,\n\t})\n\n\tpeer.on(\"signal\", signal => {\n\t\tsocket.emit(\"returning signal\", { signal, callerID })\n\t})\n\n\tpeer.signal(incomingSignal);\n\n\treturn peer;\n}\n\nuseEffect(() => {\n\tsocket.on('receive move', (data) => {\n\t\tconsole.log(data);\n\t\tsetUsers(data);\n\t})\n}, [socket]);\n\n\nconst muteUnmute = (e) => {\n\tconst enabled = userVideo.current.srcObject.getAudioTracks()[0].enabled;\n\tif (enabled) {\n\t\tuserVideo.current.srcObject.getAudioTracks()[0].enabled = false;\t\n\t} else {\n\t\tuserVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n\t}\n}\n\nconst cameraOnOff = (e) => {\n\tconst enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n\tif (enabled) {\n\t\tuserVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n\t} else {\n\t\tuserVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n\t}\n}\n\nconst screenShare = (e) => {\n\n}\n\nconst stopScreenShare = () => {\n\n}\n\nconst proximity = (user, me) => {\n\tif ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nlet setup = (p5, canvas) => {\nlet canv = p5.createCanvas(800, 600).parent(canvas);\nlet tempUsers = [];\ntempUsers.push({\n\tid: socket.id,\n\troom: roomID,\n\tx: 400,\n\ty: 100\n});\n\nsetUsers(tempUsers);\n}\n\nlet draw = (p5) => {\np5.background(\"rgb(255, 255, 255)\");\n\nlet idx = users.findIndex((user) => user.id === socket.id)\nif (idx !== -1) {\n\tlet tempUsers = users;\n\n\tif (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n\t\ttempUsers[idx].y = tempUsers[idx].y - 2;\n\t}\n\tif (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n\t\ttempUsers[idx].x = tempUsers[idx].x - 2;\n\t}\n\tif (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n\t\ttempUsers[idx].y = tempUsers[idx].y + 2;\n\t}\n\tif (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n\t\ttempUsers[idx].x = tempUsers[idx].x + 2;\n\t}\t\n\t\n\tsetUsers(tempUsers);\n\tlet data = {\n\t\tid: socket.id,\n\t\troom: roomID,\n\t\tx: tempUsers[idx].x,\n\t\ty: tempUsers[idx].y\t\n\t}\n\tsocket.emit('send move', data);\n}\nfor (let i = 0; i < users.length; i ++) {\n\tp5.circle(users[i].x, users[i].y, 16);\n}\n}\n\nreturn (\n<div className=\"room\">\n\t<div className=\"video-canvas\">\n\t\t<div className=\"buttonbox\">\n\t\t\t<button type=\"button\" className=\"mute\" onClick={ (e) => muteUnmute(e) }> Mute </button>\n\t\t  <button type=\"button\" className=\"camera\" onClick={ (e) => cameraOnOff(e) }> Camera </button>\n\t \t\t<button type=\"button\" className=\"screenshare\" onClick={ (e) => screenShare(e) }> ScreenShare </button>\n\t\t</div>\n\t\t<div className=\"videobox\">\n\t\t\t<StyledVideo muted ref={ userVideo } autoPlay playsInline />\n\t\t\t{ peers.map((peer, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Video key={ index } peer={ peer } />\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t\t<Sketch setup={ setup } draw={ draw } className=\"canvas\" />\n\t</div>\n\t<Chat className=\"chat\" socket={ socket } room={ roomID } />\n</div>\n);\n};\n\nexport default Room;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import Peer from \"simple-peer\";\n// import \"./Room.css\";\n// import Sketch from 'react-p5';\n// import styled from \"styled-components\";\n// import Chat from \"./Chat\";\n// import RoomSetup from './RoomSetup';\n\n// const socket = io.connect(\"http://localhost:3001\");\n\n// const StyledVideo = styled.video`\n// \theight: 300px;\n// \twidth: 300px;\n// `;\n\n// const Video = (props) => {\n// \tconst ref = useRef();\n\n// \tuseEffect(() => {\n// \t\tref.current.srcObject = props.peer;\n// \t}, []);\n\n// \treturn (\n// \t\t\tprops.muted ? (\n// \t\t\t\t<StyledVideo muted playsInline autoPlay ref={ ref } />\n// \t\t\t) : (\n// \t\t\t\t<StyledVideo playsInline autoPlay ref={ ref } />\n// \t\t\t)\n// \t);\n// }\n\n// function Room(props) {\n// \t\tconst [name, setName] = useState(\"\");\n// \t\tconst [mic, setMic] = useState(true);\n// \t\tconst [cam, setCam] = useState(true);\n// \t\tconst [joinedRoom, setJoinedRoom] = useState(false);\n\t\t\n// \t\tconst [users, setUsers] = useState([]);\n// \t\tconst [peers, setPeers] = useState([]);\n// \t\tconst [connected, setConnected] = useState({});\n// \t\tconst peersRef = useRef([]);\n// \t\tconst myVideo = useRef([]);\n//     const roomID = props.match.params.roomID;\n\n// \t\tuseEffect(() => {\n// \t\t\tconst getUserMedia = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n// \t\t\t\t\tsocket.emit(\"join room\", roomID);\n// \t\t\t\t\tmyVideo.current.srcObject = stream;\n// \t\t\t\t\tif (!cam) {\n// \t\t\t\t\t\tcameraOnOff();\n// \t\t\t\t\t}\n// \t\t\t\t\tif (!mic) {\n// \t\t\t\t\t\tmuteUnmute();\n// \t\t\t\t\t}\n// \t\t\t\t} catch (err) {\n// \t\t\t\t\tconsole.log(err)\n// \t\t\t\t}\n// \t\t\t}\n\n// \t\t\tgetUserMedia().then(stream => {\n// \t\t\t\tsocket.on(\"all users\", users => {\n// \t\t\t\t\tconst peers = [];\n// \t\t\t\t\tusers.forEach(userID => {\n// \t\t\t\t\t\tconst peer = createPeer(userID, socket.id, stream);\n// \t\t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\tpeers.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t});\n// \t\t\t\t\t})\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\n\t\n// \t\t\t\tsocket.on(\"user joined\", payload => {\n// \t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n// \t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t})\n// \t\t\t\t\tconst peerObj = {\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t}\n// \t\t\t\t\tsetPeers(users => [...users, peerObj]);\n// \t\t\t\t});\n\t\n// \t\t\t\tsocket.on(\"receiving returned signal\", payload => {\n// \t\t\t\t\tconst item = peersRef.current.find(p => p.peerID === payload.id);\n// \t\t\t\t\titem.peer.signal(payload.signal);\n// \t\t\t\t});\n\t\n// \t\t\t\tsocket.on(\"user left\", id => {\n// \t\t\t\t\tconst peerObj = peersRef.current.find(p => p.peerID === id);\n// \t\t\t\t\tif (peerObj) {\n// \t\t\t\t\t\tpeerObj.peer.destroy();\n// \t\t\t\t\t}\n// \t\t\t\t\tconst peers = peersRef.current.filter(p => p.peerID !== id);\n// \t\t\t\t\tpeersRef.current = peers;\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\t\n// \t\t\t});\n// \t\t}, [myVideo.current]);\n\n// \tuseEffect(() => {\n// \t\tsocket.on('receive move', (data) => {\n// \t\t\tsetUsers(data.all);\n// \t\t\tfor (let i = 0; i < data.all.length; i ++) {\n// \t\t\t\tif (data.all[i].id === data.me.id) {\n// \t\t\t\t\tcontinue;\n// \t\t\t\t}\n\n// \t\t\t\tlet closer = proximity(data.all[i], data.me)\n\n// \t\t\t\tif (closer && connected[data.all[i].id] === undefined) {\n// \t\t\t\t\tconnectPeer(data.all[i], data.me);\n\n// \t\t\t\t} else if (!closer && connected[data.all[i].id] !== undefined) {\n// \t\t\t\t\tdisconnectPeer(data.all[i], data.me);\n// \t\t\t\t}\n// \t\t\t}\n// \t\t})\n// \t}, [socket]);\n\n// \tconst createPeer = (userToSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: true,\n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('sending signal', { userToSignal, callerID, signal })\n// \t\t})\n\n// \t\treturn peer;\n// \t}\n\n// \tconst addPeer = (incomingSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: false, \n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('returning signal', { signal, callerID })\n// \t\t})\n\n// \t\tpeer.signal(incomingSignal);\n// \t\treturn peer;\n// \t}\n\n// \tlet setup = (p5, canvas) => {\n// \t\tlet canv = p5.createCanvas(800, 600).parent(canvas);\n// \t\tlet tempUsers = [];\n// \t\ttempUsers.push({\n// \t\t\tid: socket.id,\n// \t\t\troom: roomID,\n// \t\t\tx: 400,\n// \t\t\ty: 100\n// \t\t});\n\t\t\n// \t\tsetUsers(tempUsers);\n// \t}\n\n// \tlet draw = (p5) => {\n// \t\tp5.background(\"rgb(255, 255, 255)\");\n\n// \t\tlet idx = users.findIndex((user) => user.id === socket.id)\n// \t\tif (idx !== -1) {\n// \t\t\tlet tempUsers = users;\n\n// \t\t\tif (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y + 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x + 2;\n// \t\t\t}\t\n\t\t\t\n// \t\t\tlet data = {\n// \t\t\t\tid: socket.id,\n// \t\t\t\troom: roomID,\n// \t\t\t\tx: tempUsers[idx].x,\n// \t\t\t\ty: tempUsers[idx].y\t\n// \t\t\t}\n\n// \t\t\tsetUsers(tempUsers);\n// \t\t\tsocket.emit('send move', data);\n// \t\t}\n\n// \t\tfor (let i = 0; i < users.length; i ++) {\n// \t\t\tp5.circle(users[i].x, users[i].y, 16);\n// \t\t}\n// \t}\n\n\t// const muteUnmute = (e) => {\n\t// \tconst enabled = myVideo.current.stcObject.getAudioTracks()[0].enabled;\n\t// \tif (enabled) {\n\t// \t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = false;\t\n\t// \t} else {\n\t// \t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n\t// \t}\n\t// }\n\n\t// const cameraOnOff = (e) => {\n\t// \tconst enabled = myVideo.current.srcObject.getVideoTracks()[0].enabled;\n\t// \tif (enabled) {\n\t// \t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n\t// \t} else {\n\t// \t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n\t// \t}\n\t// }\n\t\n\t// const screenShare = (e) => {\n\n\t// }\n\n\t// const stopScreenShare = () => {\n\n\t// }\n\n\t// const proximity = (user, me) => {\n\t// \tif ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n\t// \t\treturn true;\n\t// \t} else {\n\t// \t\treturn false;\n\t// \t}\n\t// }\n\n// \tconst connectPeer = (user, me) => {\n\t\t\n\t\t\n// \t\tlet temp = connected;\n// \t\ttemp[user.id] = true;\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n\n// \tconst disconnectPeer = (user) => {\n\t\t\n\n// \t\tlet temp = connected;\n// \t\tdelete temp[user.id]\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n\n  // return (\n\t// \t<div>\n\t// \t\t{ joinedRoom ? (\n\t// \t\t\t<div className=\"room\">\n\t// \t\t\t\t<div className=\"video-canvas\">\n\t// \t\t\t\t\t<div className=\"videobox\">\n\t// \t\t\t\t\t\t<div className=\"buttonbox\">\n\t// \t\t\t\t\t\t\t<button type=\"button\" className=\"mute\" onClick={ (e) => muteUnmute(e) }> Mute </button>\n\t// \t\t\t\t\t\t\t<button type=\"button\" className=\"camera\" onClick={ (e) => cameraOnOff(e) }> Camera </button>\n\t// \t\t\t\t\t\t\t<button type=\"button\" className=\"screenshare\" onClick={ (e) => screenShare(e) }> ScreenShare </button>\n\t// \t\t\t\t\t\t</div>\n\t// \t\t\t\t\t\t<StyledVideo muted ref={ myVideo } autoPlay playsInLine />\n\t// \t\t\t\t\t\t<div className=\"videos\">\n\t// \t\t\t\t\t\t\t{ peers.map((peer, idx) => {\n\t// \t\t\t\t\t\t\t\treturn(\n\t// \t\t\t\t\t\t\t\t\t<div>\n\t// \t\t\t\t\t\t\t\t\t\t{ console.log(peer) }\n\t// \t\t\t\t\t\t\t\t\t\t<Video peer={ peer.peer } key={ peer.peerID }/>\n\t// \t\t\t\t\t\t\t\t\t</div>\n\t// \t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t})}\n\t// \t\t\t\t\t\t</div>\n\t// \t\t\t\t\t</div>\n\t// \t\t\t\t\t<Sketch setup={ setup } draw={ draw } className=\"canvas\" />\n\t// \t\t\t\t</div>\n\t// \t\t\t\t<Chat className=\"chat\" socket={ socket } room={ roomID } name={ name } />\n\t// \t\t\t</div>\n\t// \t\t\t) : (\n\t// \t\t\t\t<RoomSetup \n\t// \t\t\t\t\tsetJoinedRoom={ () => setJoinedRoom(true) } \n\t// \t\t\t\t\tsetMic={ preference => setMic(preference) } \n\t// \t\t\t\t\tsetCam={ preference => setCam(preference) } \n\t// \t\t\t\t\tsetName={ name => setName(name) }\n\t// \t\t\t\t/>\n\t// \t\t\t)\n\t// \t\t}\n\t// \t</div>\n  // );\n// };\n\n// export default Room;"]},"metadata":{},"sourceType":"module"}