{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/gather-video-chat/client/src/Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./Room.css\";\nimport Sketch from 'react-p5';\nimport styled from \"styled-components\";\nimport Chat from './Chat';\nimport RoomSetup from './RoomSetup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\nconst StyledVideo = styled.video`\n    height: 300px;\n    width: 300px;\n`;\n_c = StyledVideo;\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StyledVideo, {\n    playsInline: true,\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c2 = Video;\n\nfunction Room(props) {\n  _s2();\n\n  const [name, setName] = useState(\"\");\n  const [mic, setMic] = useState(true);\n  const [cam, setCam] = useState(true);\n  const [joinedRoom, setJoinedRoom] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [peers, setPeers] = useState([]);\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      socket.emit(\"join room\", roomID);\n      socket.on(\"all users\", users => {\n        const peers = [];\n        users.forEach(userID => {\n          const peer = createPeer(userID, socket.id, stream);\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peers.push({\n            peerID: userID,\n            peer\n          });\n        });\n        setPeers(peers);\n      });\n      socket.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        const peerObj = {\n          peer,\n          peerID: payload.callerID\n        };\n        setPeers(users => [...users, peerObj]);\n      });\n      socket.on(\"receiving returned signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        item.peer.signal(payload.signal);\n      });\n      socket.on(\"user left\", id => {\n        const peerObj = peersRef.current.find(p => p.peerID === id);\n\n        if (peerObj) {\n          peerObj.peer.destroy();\n        }\n\n        const peers = peersRef.current.filter(p => p.peerID !== id);\n        peersRef.current = peers;\n        setPeers(peers);\n      });\n    });\n  }, []);\n\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  };\n\n  const addPeer = (incomingSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  };\n\n  useEffect(() => {\n    socket.on('receive move', data => {\n      setUsers(data);\n    });\n  }, [socket]);\n\n  let setup = (p5, canvas) => {\n    let canv = p5.createCanvas(800, 600).parent(canvas);\n    let tempUsers = [];\n    tempUsers.push({\n      id: socket.id,\n      room: roomID,\n      x: 400,\n      y: 100\n    });\n    setUsers(tempUsers);\n  };\n\n  let draw = p5 => {\n    p5.background(\"rgb(255, 255, 255)\");\n    let idx = users.findIndex(user => user.id === socket.id);\n\n    if (idx !== -1) {\n      let tempUsers = users;\n\n      if (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n        tempUsers[idx].y = tempUsers[idx].y - 2;\n      }\n\n      if (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n        tempUsers[idx].x = tempUsers[idx].x - 2;\n      }\n\n      if (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n        tempUsers[idx].y = tempUsers[idx].y + 2;\n      }\n\n      if (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n        tempUsers[idx].x = tempUsers[idx].x + 2;\n      }\n\n      setUsers(tempUsers);\n      let data = {\n        id: socket.id,\n        room: roomID,\n        x: tempUsers[idx].x,\n        y: tempUsers[idx].y\n      };\n      socket.emit('send move', data);\n    }\n\n    for (let i = 0; i < users.length; i++) {\n      p5.circle(users[i].x, users[i].y, 16);\n    }\n  };\n\n  const proximity = (user, me) => {\n    if ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const muteUnmute = e => {\n    const enabled = userVideo.current.srcObject.getAudioTracks()[0].enabled;\n\n    if (enabled) {\n      userVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n    } else {\n      userVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n    }\n  };\n\n  const cameraOnOff = e => {\n    const enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n\n    if (enabled) {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n    } else {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n    }\n  };\n\n  const screenShare = e => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: joinedRoom ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-canvas\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"videobox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"buttonbox\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"mute\",\n              onClick: e => muteUnmute(e),\n              children: \" Mute \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"camera\",\n              onClick: e => cameraOnOff(e),\n              children: \" Camera \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"screenshare\",\n              onClick: e => screenShare(e),\n              children: \" ScreenShare \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(StyledVideo, {\n            muted: true,\n            ref: userVideo,\n            autoPlay: true,\n            playsInLine: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"videos\",\n            children: peers.map((peer, idx) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [console.log(peer), /*#__PURE__*/_jsxDEV(Video, {\n                  peer: peer.peer\n                }, peer.peerID, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 12\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 11\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Sketch, {\n          setup: setup,\n          draw: draw,\n          className: \"canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        className: \"chat\",\n        socket: socket,\n        room: roomID,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(RoomSetup, {\n      setJoinedRoom: () => setJoinedRoom(true),\n      setMic: preference => setMic(preference),\n      setCam: preference => setCam(preference),\n      setName: name => setName(name)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(Room, \"QOaSrzpXXrNzsV7qJiFUq5NE2UQ=\");\n\n_c3 = Room;\n;\nexport default Room; // import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import Peer from \"simple-peer\";\n// import \"./Room.css\";\n// import Sketch from 'react-p5';\n// import styled from \"styled-components\";\n// import Chat from \"./Chat\";\n// import RoomSetup from './RoomSetup';\n// const socket = io.connect(\"http://localhost:3001\");\n// const StyledVideo = styled.video`\n// \theight: 300px;\n// \twidth: 300px;\n// `;\n// const Video = (props) => {\n// \tconst ref = useRef();\n// \tuseEffect(() => {\n// \t\tref.current.srcObject = props.peer;\n// \t}, []);\n// \treturn (\n// \t\t\tprops.muted ? (\n// \t\t\t\t<StyledVideo muted playsInline autoPlay ref={ ref } />\n// \t\t\t) : (\n// \t\t\t\t<StyledVideo playsInline autoPlay ref={ ref } />\n// \t\t\t)\n// \t);\n// }\n// function Room(props) {\n// \t\tconst [name, setName] = useState(\"\");\n// \t\tconst [mic, setMic] = useState(true);\n// \t\tconst [cam, setCam] = useState(true);\n// \t\tconst [joinedRoom, setJoinedRoom] = useState(false);\n// \t\tconst [users, setUsers] = useState([]);\n// \t\tconst [peers, setPeers] = useState([]);\n// \t\tconst [connected, setConnected] = useState({});\n// \t\tconst peersRef = useRef([]);\n// \t\tconst myVideo = useRef([]);\n//     const roomID = props.match.params.roomID;\n// \t\tuseEffect(() => {\n// \t\t\tconst getUserMedia = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n// \t\t\t\t\tsocket.emit(\"join room\", roomID);\n// \t\t\t\t\tmyVideo.current.srcObject = stream;\n// \t\t\t\t\tif (!cam) {\n// \t\t\t\t\t\tcameraOnOff();\n// \t\t\t\t\t}\n// \t\t\t\t\tif (!mic) {\n// \t\t\t\t\t\tmuteUnmute();\n// \t\t\t\t\t}\n// \t\t\t\t} catch (err) {\n// \t\t\t\t\tconsole.log(err)\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tgetUserMedia().then(stream => {\n// \t\t\t\tsocket.on(\"all users\", users => {\n// \t\t\t\t\tconst peers = [];\n// \t\t\t\t\tusers.forEach(userID => {\n// \t\t\t\t\t\tconst peer = createPeer(userID, socket.id, stream);\n// \t\t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\tpeers.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t});\n// \t\t\t\t\t})\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\n// \t\t\t\tsocket.on(\"user joined\", payload => {\n// \t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n// \t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t})\n// \t\t\t\t\tconst peerObj = {\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t}\n// \t\t\t\t\tsetPeers(users => [...users, peerObj]);\n// \t\t\t\t});\n// \t\t\t\tsocket.on(\"receiving returned signal\", payload => {\n// \t\t\t\t\tconst item = peersRef.current.find(p => p.peerID === payload.id);\n// \t\t\t\t\titem.peer.signal(payload.signal);\n// \t\t\t\t});\n// \t\t\t\tsocket.on(\"user left\", id => {\n// \t\t\t\t\tconst peerObj = peersRef.current.find(p => p.peerID === id);\n// \t\t\t\t\tif (peerObj) {\n// \t\t\t\t\t\tpeerObj.peer.destroy();\n// \t\t\t\t\t}\n// \t\t\t\t\tconst peers = peersRef.current.filter(p => p.peerID !== id);\n// \t\t\t\t\tpeersRef.current = peers;\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\t\n// \t\t\t});\n// \t\t}, [myVideo.current]);\n// \tuseEffect(() => {\n// \t\tsocket.on('receive move', (data) => {\n// \t\t\tsetUsers(data.all);\n// \t\t\tfor (let i = 0; i < data.all.length; i ++) {\n// \t\t\t\tif (data.all[i].id === data.me.id) {\n// \t\t\t\t\tcontinue;\n// \t\t\t\t}\n// \t\t\t\tlet closer = proximity(data.all[i], data.me)\n// \t\t\t\tif (closer && connected[data.all[i].id] === undefined) {\n// \t\t\t\t\tconnectPeer(data.all[i], data.me);\n// \t\t\t\t} else if (!closer && connected[data.all[i].id] !== undefined) {\n// \t\t\t\t\tdisconnectPeer(data.all[i], data.me);\n// \t\t\t\t}\n// \t\t\t}\n// \t\t})\n// \t}, [socket]);\n// \tconst createPeer = (userToSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: true,\n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('sending signal', { userToSignal, callerID, signal })\n// \t\t})\n// \t\treturn peer;\n// \t}\n// \tconst addPeer = (incomingSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: false, \n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('returning signal', { signal, callerID })\n// \t\t})\n// \t\tpeer.signal(incomingSignal);\n// \t\treturn peer;\n// \t}\n// \tlet setup = (p5, canvas) => {\n// \t\tlet canv = p5.createCanvas(800, 600).parent(canvas);\n// \t\tlet tempUsers = [];\n// \t\ttempUsers.push({\n// \t\t\tid: socket.id,\n// \t\t\troom: roomID,\n// \t\t\tx: 400,\n// \t\t\ty: 100\n// \t\t});\n// \t\tsetUsers(tempUsers);\n// \t}\n// \tlet draw = (p5) => {\n// \t\tp5.background(\"rgb(255, 255, 255)\");\n// \t\tlet idx = users.findIndex((user) => user.id === socket.id)\n// \t\tif (idx !== -1) {\n// \t\t\tlet tempUsers = users;\n// \t\t\tif (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y + 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x + 2;\n// \t\t\t}\t\n// \t\t\tlet data = {\n// \t\t\t\tid: socket.id,\n// \t\t\t\troom: roomID,\n// \t\t\t\tx: tempUsers[idx].x,\n// \t\t\t\ty: tempUsers[idx].y\t\n// \t\t\t}\n// \t\t\tsetUsers(tempUsers);\n// \t\t\tsocket.emit('send move', data);\n// \t\t}\n// \t\tfor (let i = 0; i < users.length; i ++) {\n// \t\t\tp5.circle(users[i].x, users[i].y, 16);\n// \t\t}\n// \t}\n// \tconst muteUnmute = (e) => {\n// \t\tconst enabled = myVideo.current.stcObject.getAudioTracks()[0].enabled;\n// \t\tif (enabled) {\n// \t\t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = false;\t\n// \t\t} else {\n// \t\t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n// \t\t}\n// \t}\n// \tconst cameraOnOff = (e) => {\n// \t\tconst enabled = myVideo.current.srcObject.getVideoTracks()[0].enabled;\n// \t\tif (enabled) {\n// \t\t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n// \t\t} else {\n// \t\t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n// \t\t}\n// \t}\n// \tconst screenShare = (e) => {\n// \t}\n// \tconst stopScreenShare = () => {\n// \t}\n// const proximity = (user, me) => {\n// \tif ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n// \t\treturn true;\n// \t} else {\n// \t\treturn false;\n// \t}\n// }\n// \tconst connectPeer = (user, me) => {\n// \t\tlet temp = connected;\n// \t\ttemp[user.id] = true;\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n// \tconst disconnectPeer = (user) => {\n// \t\tlet temp = connected;\n// \t\tdelete temp[user.id]\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n// return (\n// \t<div>\n// \t\t{ joinedRoom ? (\n// \t\t\t<div className=\"room\">\n// \t\t\t\t<div className=\"video-canvas\">\n// \t\t\t\t\t<div className=\"videobox\">\n// \t\t\t\t\t\t<div className=\"buttonbox\">\n// \t\t\t\t\t\t\t<button type=\"button\" className=\"mute\" onClick={ (e) => muteUnmute(e) }> Mute </button>\n// \t\t\t\t\t\t\t<button type=\"button\" className=\"camera\" onClick={ (e) => cameraOnOff(e) }> Camera </button>\n// \t\t\t\t\t\t\t<button type=\"button\" className=\"screenshare\" onClick={ (e) => screenShare(e) }> ScreenShare </button>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<StyledVideo muted ref={ myVideo } autoPlay playsInLine />\n// \t\t\t\t\t\t<div className=\"videos\">\n// \t\t\t\t\t\t\t{ peers.map((peer, idx) => {\n// \t\t\t\t\t\t\t\treturn(\n// \t\t\t\t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t\t\t\t{ console.log(peer) }\n// \t\t\t\t\t\t\t\t\t\t<Video peer={ peer.peer } key={ peer.peerID }/>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t)\n// \t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<Sketch setup={ setup } draw={ draw } className=\"canvas\" />\n// \t\t\t\t</div>\n// \t\t\t\t<Chat className=\"chat\" socket={ socket } room={ roomID } name={ name } />\n// \t\t\t</div>\n// \t\t\t) : (\n// \t\t\t\t<RoomSetup \n// \t\t\t\t\tsetJoinedRoom={ () => setJoinedRoom(true) } \n// \t\t\t\t\tsetMic={ preference => setMic(preference) } \n// \t\t\t\t\tsetCam={ preference => setCam(preference) } \n// \t\t\t\t\tsetName={ name => setName(name) }\n// \t\t\t\t/>\n// \t\t\t)\n// \t\t}\n// \t</div>\n// );\n// };\n// export default Room;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledVideo\");\n$RefreshReg$(_c2, \"Video\");\n$RefreshReg$(_c3, \"Room\");","map":{"version":3,"sources":["/Users/shubhamkapoor/gather-video-chat/client/src/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","Sketch","styled","Chat","RoomSetup","socket","connect","StyledVideo","video","Video","props","ref","peer","on","stream","current","srcObject","Room","name","setName","mic","setMic","cam","setCam","joinedRoom","setJoinedRoom","users","setUsers","peers","setPeers","userVideo","peersRef","roomID","match","params","navigator","mediaDevices","getUserMedia","audio","then","emit","forEach","userID","createPeer","id","push","peerID","payload","addPeer","signal","callerID","peerObj","item","find","p","destroy","filter","userToSignal","initiator","trickle","incomingSignal","data","setup","p5","canvas","canv","createCanvas","parent","tempUsers","room","x","y","draw","background","idx","findIndex","user","keyIsDown","i","length","circle","proximity","me","muteUnmute","e","enabled","getAudioTracks","cameraOnOff","getVideoTracks","screenShare","map","console","log","preference"],"mappings":"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":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./Room.css\";\nimport Sketch from 'react-p5';\nimport styled from \"styled-components\";\nimport Chat from './Chat';\nimport RoomSetup from './RoomSetup';\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nconst StyledVideo = styled.video`\n    height: 300px;\n    width: 300px;\n`;\n\nconst Video = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <StyledVideo playsInline autoPlay ref={ ref } />\n    );\n}\n\nfunction Room(props) {\n\tconst [name, setName] = useState(\"\");\n\tconst [mic, setMic] = useState(true);\n\tconst [cam, setCam] = useState(true);\n\tconst [joinedRoom, setJoinedRoom] = useState(false);\n\n\tconst [users, setUsers] = useState([]);\n  const [peers, setPeers] = useState([]);\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n    userVideo.current.srcObject = stream;\n\t\t\t\t\tsocket.emit(\"join room\", roomID);\n            socket.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socket.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push({\n\t\t\t\t\t\t\t\t\t\tpeerID: userID,\n\t\t\t\t\t\t\t\t\t\tpeer,\n\t\t\t\t\t\t\t\t\t});\n                })\n                setPeers(peers);\n            })\n\n            socket.on(\"user joined\", payload => {\n              const peer = addPeer(payload.signal, payload.callerID, stream);\n              peersRef.current.push({\n              \tpeerID: payload.callerID,\n                peer,\n              })\n\n\t\t\t\tconst peerObj = {\n\t\t\t\t\tpeer,\n\t\t\t\t\tpeerID: payload.callerID,\n\t\t\t\t}\n                setPeers(users => [...users, peerObj]);\n            });\n\n            socket.on(\"receiving returned signal\", payload => {\n                const item = peersRef.current.find(p => p.peerID === payload.id);\n                item.peer.signal(payload.signal);\n            });\n\n\t\t\tsocket.on(\"user left\", id => {\n\t\t\t\tconst peerObj = peersRef.current.find(p => p.peerID === id);\n\t\t\t\tif (peerObj) {\n\t\t\t\t\tpeerObj.peer.destroy();\n\t\t\t\t}\n\t\t\t\tconst peers = peersRef.current.filter(p => p.peerID !== id);\n\t\t\t\tpeersRef.current = peers;\n\t\t\t\tsetPeers(peers);\n\t\t\t})\n    })\n    }, []);\n\n    const createPeer = (userToSignal, callerID, stream) => {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socket.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    const addPeer = (incomingSignal, callerID, stream) => {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socket.emit(\"returning signal\", { signal, callerID })\n        })\n\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n\n\tuseEffect(() => {\n\t\tsocket.on('receive move', (data) => {\n\t\t\tsetUsers(data);\n\t\t})\n\t}, [socket]);\n\n\n\tlet setup = (p5, canvas) => {\n\t\tlet canv = p5.createCanvas(800, 600).parent(canvas);\n\t\tlet tempUsers = [];\n\t\ttempUsers.push({\n\t\t\tid: socket.id,\n\t\t\troom: roomID,\n\t\t\tx: 400,\n\t\t\ty: 100\n\t\t});\n\t\t\n\t\tsetUsers(tempUsers);\n\t}\n\n\tlet draw = (p5) => {\n\t\tp5.background(\"rgb(255, 255, 255)\");\n\n\t\tlet idx = users.findIndex((user) => user.id === socket.id)\n\t\tif (idx !== -1) {\n\t\t\tlet tempUsers = users;\n\n\t\t\tif (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n\t\t\t\ttempUsers[idx].y = tempUsers[idx].y - 2;\n\t\t\t}\n\t\t\tif (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n\t\t\t\ttempUsers[idx].x = tempUsers[idx].x - 2;\n\t\t\t}\n\t\t\tif (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n\t\t\t\ttempUsers[idx].y = tempUsers[idx].y + 2;\n\t\t\t}\n\t\t\tif (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n\t\t\t\ttempUsers[idx].x = tempUsers[idx].x + 2;\n\t\t\t}\t\n\t\t\t\n\t\t\tsetUsers(tempUsers);\n\t\t\tlet data = {\n\t\t\t\tid: socket.id,\n\t\t\t\troom: roomID,\n\t\t\t\tx: tempUsers[idx].x,\n\t\t\t\ty: tempUsers[idx].y\t\n\t\t\t}\n\t\t\tsocket.emit('send move', data);\n\t\t}\n\t\tfor (let i = 0; i < users.length; i ++) {\n\t\t\tp5.circle(users[i].x, users[i].y, 16);\n\t\t}\n\t}\n\tconst proximity = (user, me) => {\n\t\tif ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tconst muteUnmute = (e) => {\n\t\tconst enabled = userVideo.current.srcObject.getAudioTracks()[0].enabled;\n\t\tif (enabled) {\n\t\t\tuserVideo.current.srcObject.getAudioTracks()[0].enabled = false;\t\n\t\t} else {\n\t\t\tuserVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n\t\t}\n\t}\n\n\tconst cameraOnOff = (e) => {\n\t\tconst enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n\t\tif (enabled) {\n\t\t\tuserVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n\t\t} else {\n\t\t\tuserVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n\t\t}\n\t}\n\tconst screenShare = (e) => {\n\n\t}\t\n\n  return (\n\t\t<div>\n\t\t\t{ joinedRoom ? (\n\t\t\t\t<div className=\"room\">\n\t\t\t\t\t<div className=\"video-canvas\">\n\t\t\t\t\t\t<div className=\"videobox\">\n\t\t\t\t\t\t\t<div className=\"buttonbox\">\n\t\t\t\t\t\t\t\t<button type=\"button\" className=\"mute\" onClick={ (e) => muteUnmute(e) }> Mute </button>\n\t\t\t\t\t\t\t\t<button type=\"button\" className=\"camera\" onClick={ (e) => cameraOnOff(e) }> Camera </button>\n\t\t\t\t\t\t\t\t<button type=\"button\" className=\"screenshare\" onClick={ (e) => screenShare(e) }> ScreenShare </button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<StyledVideo muted ref={ userVideo } autoPlay playsInLine />\n\t\t\t\t\t\t\t<div className=\"videos\">\n\t\t\t\t\t\t\t\t{ peers.map((peer, idx) => {\n\t\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t{ console.log(peer) }\n\t\t\t\t\t\t\t\t\t\t\t<Video peer={ peer.peer } key={ peer.peerID }/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Sketch setup={ setup } draw={ draw } className=\"canvas\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Chat className=\"chat\" socket={ socket } room={ roomID } name={ name } />\n\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<RoomSetup \n\t\t\t\t\t\tsetJoinedRoom={ () => setJoinedRoom(true) } \n\t\t\t\t\t\tsetMic={ preference => setMic(preference) } \n\t\t\t\t\t\tsetCam={ preference => setCam(preference) } \n\t\t\t\t\t\tsetName={ name => setName(name) }\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n  );\n};\n\nexport default Room;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import Peer from \"simple-peer\";\n// import \"./Room.css\";\n// import Sketch from 'react-p5';\n// import styled from \"styled-components\";\n// import Chat from \"./Chat\";\n// import RoomSetup from './RoomSetup';\n\n// const socket = io.connect(\"http://localhost:3001\");\n\n// const StyledVideo = styled.video`\n// \theight: 300px;\n// \twidth: 300px;\n// `;\n\n// const Video = (props) => {\n// \tconst ref = useRef();\n\n// \tuseEffect(() => {\n// \t\tref.current.srcObject = props.peer;\n// \t}, []);\n\n// \treturn (\n// \t\t\tprops.muted ? (\n// \t\t\t\t<StyledVideo muted playsInline autoPlay ref={ ref } />\n// \t\t\t) : (\n// \t\t\t\t<StyledVideo playsInline autoPlay ref={ ref } />\n// \t\t\t)\n// \t);\n// }\n\n// function Room(props) {\n// \t\tconst [name, setName] = useState(\"\");\n// \t\tconst [mic, setMic] = useState(true);\n// \t\tconst [cam, setCam] = useState(true);\n// \t\tconst [joinedRoom, setJoinedRoom] = useState(false);\n\t\t\n// \t\tconst [users, setUsers] = useState([]);\n// \t\tconst [peers, setPeers] = useState([]);\n// \t\tconst [connected, setConnected] = useState({});\n// \t\tconst peersRef = useRef([]);\n// \t\tconst myVideo = useRef([]);\n//     const roomID = props.match.params.roomID;\n\n// \t\tuseEffect(() => {\n// \t\t\tconst getUserMedia = async () => {\n// \t\t\t\ttry {\n// \t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n// \t\t\t\t\tsocket.emit(\"join room\", roomID);\n// \t\t\t\t\tmyVideo.current.srcObject = stream;\n// \t\t\t\t\tif (!cam) {\n// \t\t\t\t\t\tcameraOnOff();\n// \t\t\t\t\t}\n// \t\t\t\t\tif (!mic) {\n// \t\t\t\t\t\tmuteUnmute();\n// \t\t\t\t\t}\n// \t\t\t\t} catch (err) {\n// \t\t\t\t\tconsole.log(err)\n// \t\t\t\t}\n// \t\t\t}\n\n// \t\t\tgetUserMedia().then(stream => {\n// \t\t\t\tsocket.on(\"all users\", users => {\n// \t\t\t\t\tconst peers = [];\n// \t\t\t\t\tusers.forEach(userID => {\n// \t\t\t\t\t\tconst peer = createPeer(userID, socket.id, stream);\n// \t\t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\tpeers.push({\n// \t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t});\n// \t\t\t\t\t})\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\n\t\n// \t\t\t\tsocket.on(\"user joined\", payload => {\n// \t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n// \t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t})\n// \t\t\t\t\tconst peerObj = {\n// \t\t\t\t\t\tpeer,\n// \t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t}\n// \t\t\t\t\tsetPeers(users => [...users, peerObj]);\n// \t\t\t\t});\n\t\n// \t\t\t\tsocket.on(\"receiving returned signal\", payload => {\n// \t\t\t\t\tconst item = peersRef.current.find(p => p.peerID === payload.id);\n// \t\t\t\t\titem.peer.signal(payload.signal);\n// \t\t\t\t});\n\t\n// \t\t\t\tsocket.on(\"user left\", id => {\n// \t\t\t\t\tconst peerObj = peersRef.current.find(p => p.peerID === id);\n// \t\t\t\t\tif (peerObj) {\n// \t\t\t\t\t\tpeerObj.peer.destroy();\n// \t\t\t\t\t}\n// \t\t\t\t\tconst peers = peersRef.current.filter(p => p.peerID !== id);\n// \t\t\t\t\tpeersRef.current = peers;\n// \t\t\t\t\tsetPeers(peers);\n// \t\t\t\t})\t\n// \t\t\t});\n// \t\t}, [myVideo.current]);\n\n// \tuseEffect(() => {\n// \t\tsocket.on('receive move', (data) => {\n// \t\t\tsetUsers(data.all);\n// \t\t\tfor (let i = 0; i < data.all.length; i ++) {\n// \t\t\t\tif (data.all[i].id === data.me.id) {\n// \t\t\t\t\tcontinue;\n// \t\t\t\t}\n\n// \t\t\t\tlet closer = proximity(data.all[i], data.me)\n\n// \t\t\t\tif (closer && connected[data.all[i].id] === undefined) {\n// \t\t\t\t\tconnectPeer(data.all[i], data.me);\n\n// \t\t\t\t} else if (!closer && connected[data.all[i].id] !== undefined) {\n// \t\t\t\t\tdisconnectPeer(data.all[i], data.me);\n// \t\t\t\t}\n// \t\t\t}\n// \t\t})\n// \t}, [socket]);\n\n// \tconst createPeer = (userToSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: true,\n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('sending signal', { userToSignal, callerID, signal })\n// \t\t})\n\n// \t\treturn peer;\n// \t}\n\n// \tconst addPeer = (incomingSignal, callerID, stream) => {\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: false, \n// \t\t\ttrickle: false,\n// \t\t\tstream\n// \t\t})\n\n// \t\tpeer.on('signal', signal => {\n// \t\t\tsocket.emit('returning signal', { signal, callerID })\n// \t\t})\n\n// \t\tpeer.signal(incomingSignal);\n// \t\treturn peer;\n// \t}\n\n// \tlet setup = (p5, canvas) => {\n// \t\tlet canv = p5.createCanvas(800, 600).parent(canvas);\n// \t\tlet tempUsers = [];\n// \t\ttempUsers.push({\n// \t\t\tid: socket.id,\n// \t\t\troom: roomID,\n// \t\t\tx: 400,\n// \t\t\ty: 100\n// \t\t});\n\t\t\n// \t\tsetUsers(tempUsers);\n// \t}\n\n// \tlet draw = (p5) => {\n// \t\tp5.background(\"rgb(255, 255, 255)\");\n\n// \t\tlet idx = users.findIndex((user) => user.id === socket.id)\n// \t\tif (idx !== -1) {\n// \t\t\tlet tempUsers = users;\n\n// \t\t\tif (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x - 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n// \t\t\t\ttempUsers[idx].y = tempUsers[idx].y + 2;\n// \t\t\t}\n// \t\t\tif (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n// \t\t\t\ttempUsers[idx].x = tempUsers[idx].x + 2;\n// \t\t\t}\t\n\t\t\t\n// \t\t\tlet data = {\n// \t\t\t\tid: socket.id,\n// \t\t\t\troom: roomID,\n// \t\t\t\tx: tempUsers[idx].x,\n// \t\t\t\ty: tempUsers[idx].y\t\n// \t\t\t}\n\n// \t\t\tsetUsers(tempUsers);\n// \t\t\tsocket.emit('send move', data);\n// \t\t}\n\n// \t\tfor (let i = 0; i < users.length; i ++) {\n// \t\t\tp5.circle(users[i].x, users[i].y, 16);\n// \t\t}\n// \t}\n\n// \tconst muteUnmute = (e) => {\n// \t\tconst enabled = myVideo.current.stcObject.getAudioTracks()[0].enabled;\n// \t\tif (enabled) {\n// \t\t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = false;\t\n// \t\t} else {\n// \t\t\tmyVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n// \t\t}\n// \t}\n\n// \tconst cameraOnOff = (e) => {\n// \t\tconst enabled = myVideo.current.srcObject.getVideoTracks()[0].enabled;\n// \t\tif (enabled) {\n// \t\t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n// \t\t} else {\n// \t\t\tmyVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n// \t\t}\n// \t}\n\t\n// \tconst screenShare = (e) => {\n\n// \t}\n\n// \tconst stopScreenShare = () => {\n\n// \t}\n\n\t// const proximity = (user, me) => {\n\t// \tif ((user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <= 10000) {\n\t// \t\treturn true;\n\t// \t} else {\n\t// \t\treturn false;\n\t// \t}\n\t// }\n\n// \tconst connectPeer = (user, me) => {\n\t\t\n\t\t\n// \t\tlet temp = connected;\n// \t\ttemp[user.id] = true;\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n\n// \tconst disconnectPeer = (user) => {\n\t\t\n\n// \t\tlet temp = connected;\n// \t\tdelete temp[user.id]\n// \t\tsetConnected(temp);\n// \t\treturn;\n// \t}\n\n  // return (\n\t// \t<div>\n\t// \t\t{ joinedRoom ? (\n\t// \t\t\t<div className=\"room\">\n\t// \t\t\t\t<div className=\"video-canvas\">\n\t// \t\t\t\t\t<div className=\"videobox\">\n\t// \t\t\t\t\t\t<div className=\"buttonbox\">\n\t// \t\t\t\t\t\t\t<button type=\"button\" className=\"mute\" onClick={ (e) => muteUnmute(e) }> Mute </button>\n\t// \t\t\t\t\t\t\t<button type=\"button\" className=\"camera\" onClick={ (e) => cameraOnOff(e) }> Camera </button>\n\t// \t\t\t\t\t\t\t<button type=\"button\" className=\"screenshare\" onClick={ (e) => screenShare(e) }> ScreenShare </button>\n\t// \t\t\t\t\t\t</div>\n\t// \t\t\t\t\t\t<StyledVideo muted ref={ myVideo } autoPlay playsInLine />\n\t// \t\t\t\t\t\t<div className=\"videos\">\n\t// \t\t\t\t\t\t\t{ peers.map((peer, idx) => {\n\t// \t\t\t\t\t\t\t\treturn(\n\t// \t\t\t\t\t\t\t\t\t<div>\n\t// \t\t\t\t\t\t\t\t\t\t{ console.log(peer) }\n\t// \t\t\t\t\t\t\t\t\t\t<Video peer={ peer.peer } key={ peer.peerID }/>\n\t// \t\t\t\t\t\t\t\t\t</div>\n\t// \t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t})}\n\t// \t\t\t\t\t\t</div>\n\t// \t\t\t\t\t</div>\n\t// \t\t\t\t\t<Sketch setup={ setup } draw={ draw } className=\"canvas\" />\n\t// \t\t\t\t</div>\n\t// \t\t\t\t<Chat className=\"chat\" socket={ socket } room={ roomID } name={ name } />\n\t// \t\t\t</div>\n\t// \t\t\t) : (\n\t// \t\t\t\t<RoomSetup \n\t// \t\t\t\t\tsetJoinedRoom={ () => setJoinedRoom(true) } \n\t// \t\t\t\t\tsetMic={ preference => setMic(preference) } \n\t// \t\t\t\t\tsetCam={ preference => setCam(preference) } \n\t// \t\t\t\t\tsetName={ name => setName(name) }\n\t// \t\t\t\t/>\n\t// \t\t\t)\n\t// \t\t}\n\t// \t</div>\n  // );\n// };\n\n// export default Room;"]},"metadata":{},"sourceType":"module"}