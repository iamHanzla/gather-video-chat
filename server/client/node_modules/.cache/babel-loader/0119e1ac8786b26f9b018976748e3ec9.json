{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkapoor/gather-video-chat/server/client/src/Model.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as handpose from '@tensorflow-models/handpose';\nimport Webcam from 'react-webcam';\nimport './Model.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Model(props) {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n    }\n  };\n\n  runHandpose();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"model\",\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      style: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        height: \"100%\",\n        width: \" 100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Model, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = Model;\nexport default Model;\n\nvar _c;\n\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"sources":["/Users/shubhamkapoor/gather-video-chat/server/client/src/Model.js"],"names":["React","useRef","tf","handpose","Webcam","Model","props","webcamRef","canvasRef","runHandpose","net","load","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,aAAP;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACrB,QAAMC,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMO,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMQ,WAAW,GAAG,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAlB;AAEAC,IAAAA,WAAW,CAAC,MAAM;AACjBC,MAAAA,MAAM,CAACH,GAAD,CAAN;AACA,KAFU,EAER,GAFQ,CAAX;AAGA,GAND;;AAQC,QAAMG,MAAM,GAAG,MAAOH,GAAP,IAAe;AAC5B,QACE,OAAOH,SAAS,CAACO,OAAjB,KAA6B,WAA7B,IACAP,SAAS,CAACO,OAAV,KAAsB,IADtB,IAEAP,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBC,UAAxB,KAAuC,CAHzC,EAIE;AACA,YAAMD,KAAK,GAAGR,SAAS,CAACO,OAAV,CAAkBC,KAAhC;AACA,YAAME,UAAU,GAAGV,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBE,UAA3C;AACA,YAAMC,WAAW,GAAGX,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBG,WAA5C;AAEAX,MAAAA,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBI,KAAxB,GAAgCF,UAAhC;AACAV,MAAAA,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBK,MAAxB,GAAiCF,WAAjC;AAEAV,MAAAA,SAAS,CAACM,OAAV,CAAkBK,KAAlB,GAA0BF,UAA1B;AACAT,MAAAA,SAAS,CAACM,OAAV,CAAkBM,MAAlB,GAA2BF,WAA3B;AAEA,YAAMG,IAAI,GAAG,MAAMX,GAAG,CAACY,aAAJ,CAAkBP,KAAlB,CAAnB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;AACF,GAnBD;;AAqBAZ,EAAAA,WAAW;AAEZ,sBACC;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACC,QAAC,MAAD;AACC,MAAA,GAAG,EAAEF,SADN;AAEC,MAAA,KAAK;AAFN;AAAA;AAAA;AAAA;AAAA,YADD,eAKC;AACC,MAAA,GAAG,EAAEC,SADN;AAEC,MAAA,KAAK,EAAE;AACNY,QAAAA,MAAM,EAAE,MADF;AAELD,QAAAA,KAAK,EAAC;AAFD;AAFR;AAAA;AAAA;AAAA;AAAA,YALD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAeA;;GAlDQd,K;;KAAAA,K;AAoDT,eAAeA,KAAf","sourcesContent":["import React, { useRef } from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport * as handpose from '@tensorflow-models/handpose'\nimport Webcam from 'react-webcam'\nimport './Model.css'\n\nfunction Model(props) {\n\tconst webcamRef = useRef(null);\n\tconst canvasRef = useRef(null);\n\n\tconst runHandpose = async () => {\n\t\tconst net = await handpose.load();\n\n\t\tsetInterval(() => {\n\t\t\tdetect(net);\n\t\t}, 100)\n\t}\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n    }\n  };\n\n  runHandpose();\n\n\treturn (\n\t\t<div className=\"model\">\n\t\t\t<Webcam \n\t\t\t\tref={webcamRef}\n\t\t\t\tstyle\n\t\t\t/>\n\t\t\t<canvas \n\t\t\t\tref={canvasRef}\n\t\t\t\tstyle={{\n\t\t\t\t\theight: \"100%\",\n  \t\t\t\twidth:\" 100%\",\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Model\n"]},"metadata":{},"sourceType":"module"}