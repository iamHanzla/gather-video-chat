[{"/Users/shubhamkapoor/gather-video-chat/server/client/src/index.js":"1","/Users/shubhamkapoor/gather-video-chat/server/client/src/App.js":"2","/Users/shubhamkapoor/gather-video-chat/server/client/src/Room.js":"3","/Users/shubhamkapoor/gather-video-chat/server/client/src/JoinRoom.js":"4","/Users/shubhamkapoor/gather-video-chat/server/client/src/Chat.js":"5","/Users/shubhamkapoor/gather-video-chat/server/client/src/RoomSetup.js":"6"},{"size":266,"mtime":1636283341324,"results":"7","hashOfConfig":"8"},{"size":390,"mtime":1636135218415,"results":"9","hashOfConfig":"8"},{"size":8662,"mtime":1636298376526,"results":"10","hashOfConfig":"8"},{"size":1788,"mtime":1636283341319,"results":"11","hashOfConfig":"8"},{"size":2540,"mtime":1636291251282,"results":"12","hashOfConfig":"8"},{"size":3163,"mtime":1636283341321,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vnuz9b",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shubhamkapoor/gather-video-chat/server/client/src/index.js",[],"/Users/shubhamkapoor/gather-video-chat/server/client/src/App.js",[],"/Users/shubhamkapoor/gather-video-chat/server/client/src/Room.js",["28","29","30","31","32","33"],"import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./Room.css\";\nimport Sketch from \"react-p5\";\nimport styled from \"styled-components\";\nimport Chat from \"./Chat\";\nimport RoomSetup from \"./RoomSetup\";\nimport \"font-awesome/css/font-awesome.min.css\";\n<script\n  src=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/js/all.min.js\"\n  integrity=\"sha512-cyAbuGborsD25bhT/uz++wPqrh5cqPh1ULJz4NSpN9ktWcA6Hnh9g+CWKeNx2R0fgQt+ybRXdabSBgYXkQTTmA==\"\n  crossorigin=\"anonymous\"\n  referrerpolicy=\"no-referrer\"\n></script>;\nconst socket = io.connect(\"http://localhost:3001\");\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current.srcObject = props.peer._remoteStreams[0];\n  }, []);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\n\nfunction Room(props) {\n  const [name, setName] = useState(\"\");\n  const [mic, setMic] = useState(true);\n  const [cam, setCam] = useState(true);\n  const [joinedRoom, setJoinedRoom] = useState(false);\n\n  const [nearby, setNearby] = useState([]);\n  const [users, setUsers] = useState([]);\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const trackPeers = useRef([]);\n  const roomID = props.match.params.roomID;\n\n  useEffect(() => {\n    if (!joinedRoom) {\n      return;\n    }\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        userVideo.current.srcObject = stream;\n        if (!cam) {\n          cameraOnOff();\n        }\n        if (!mic) {\n          muteUnmute();\n        }\n        socket.emit(\"join room\", {roomID: roomID, name: name});\n        socket.on(\"all users\", (users) => {\n          users.forEach((userID) => {\n            const peer = createPeer(userID, socket.id, stream);\n            peersRef.current.push({\n              peerID: userID,\n              peer,\n            });\n          });\n        });\n\n        socket.on(\"user joined\", (payload) => {\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer,\n          });\n        });\n\n        socket.on(\"receiving returned signal\", (payload) => {\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\n          item.peer.signal(payload.signal);\n        });\n\n        socket.on(\"user left\", (id) => {\n          const peerObj = peersRef.current.find((p) => p.peerID === id);\n          if (peerObj) {\n            peerObj.peer.destroy();\n          }\n          const peers = peersRef.current.filter((p) => p.peerID !== id);\n          const tempNearby = nearby.filter((p) => p.peerID !== id);\n          peersRef.current = peers;\n          setNearby(tempNearby);\n        });\n      });\n  }, [joinedRoom]);\n\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socket.emit(\"sending signal\", { userToSignal, callerID, signal });\n    });\n\n    return peer;\n  };\n\n  const addPeer = (incomingSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socket.emit(\"returning signal\", { signal, callerID });\n    });\n\n    peer.signal(incomingSignal);\n\n    return peer;\n  };\n\n  useEffect(() => {\n    socket.on(\"receive move\", (data) => {\n      setUsers(data.all);\n\n      var me = {};\n      for (let i = 0; i < data.all.length; i++) {\n        if (data.all[i].id === socket.id) {\n          me = data.all[i];\n          break;\n        }\n      }\n\n      var tempNearby = [];\n      for (let i = 0; i < data.all.length; i++) {\n        if (data.all[i].id === socket.id) {\n          continue;\n        }\n        if (proximity(data.all[i], me)) {\n          for (var j = 0; j < peersRef.current.length; j++) {\n            if (peersRef.current[j].peerID === data.all[i].id) {\n              tempNearby.push({peerObj: peersRef.current[j], name: data.all[i].name});\n            }\n          }\n        }\n      }\n\n      setNearby(tempNearby);\n    });\n  }, [socket]);\n\n  const muteUnmute = (e) => {\n    const enabled = userVideo.current.srcObject.getAudioTracks()[0].enabled;\n    if (enabled) {\n      userVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n    } else {\n      userVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n    }\n    const muteBtn = document.querySelector(\".mute-1\");\n    muteBtn.classList.toggle(\"whitened\");\n  };\n\n  const cameraOnOff = (e) => {\n    const enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n    if (enabled) {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n    } else {\n      userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n    }\n    const cameraBtn = document.querySelector(\".camera-1\");\n    cameraBtn.classList.toggle(\"cameraOff\");\n  };\n\n  const screenShare = (e) => {};\n\n  const stopScreenShare = () => {};\n\n  const proximity = (user, me) => {\n    if (\n      (user.x - me.x) * (user.x - me.x) + (user.y - me.y) * (user.y - me.y) <=\n      10000\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  let setup = (p5, canvas) => {\n    let canv = p5.createCanvas(924, 500).parent(canvas);\n    let tempUsers = [];\n    tempUsers.push({\n      id: socket.id,\n      room: roomID,\n      x: 462,\n      y: 100,\n    });\n\n    setUsers(tempUsers);\n  };\n\n  let draw = (p5) => {\n    p5.background(\"rgb(255, 255, 255)\");\n\n    let idx = users.findIndex((user) => user.id === socket.id);\n    if (idx !== -1) {\n      let tempUsers = users;\n\n      if (p5.keyIsDown(87) || p5.keyIsDown(38)) {\n        tempUsers[idx].y = tempUsers[idx].y - 2;\n      }\n      if (p5.keyIsDown(65) || p5.keyIsDown(37)) {\n        tempUsers[idx].x = tempUsers[idx].x - 2;\n      }\n      if (p5.keyIsDown(83) || p5.keyIsDown(40)) {\n        tempUsers[idx].y = tempUsers[idx].y + 2;\n      }\n      if (p5.keyIsDown(68) || p5.keyIsDown(39)) {\n        tempUsers[idx].x = tempUsers[idx].x + 2;\n      }\n\n      setUsers(tempUsers);\n      let data = {\n        id: socket.id,\n        room: roomID,\n        x: tempUsers[idx].x,\n        y: tempUsers[idx].y,\n      };\n      socket.emit(\"send move\", data);\n    }\n    for (let i = 0; i < users.length; i++) {\n      p5.circle(users[i].x, users[i].y, 16);\n    }\n  };\n\n  return (\n    <div>\n      {joinedRoom ? (\n        <div className=\"room\">\n          <div className=\"video-canvas\">\n            <div className=\"buttonbox\">\n              <button\n                type=\"button\"\n                className=\"mute-1\"\n                onClick={(e) => muteUnmute(e)}\n              >\n                {\" \"}\n                <i className=\"fa fa-microphone-slash\"></i>{\" \"}\n              </button>\n              <button\n                type=\"button\"\n                className=\"camera-1\"\n                onClick={(e) => cameraOnOff(e)}\n              >\n                {\" \"}\n                <i className=\"fa fa-camera\"></i>{\" \"}\n              </button>\n              <button\n                type=\"button\"\n                className=\"screenshare-1\"\n                onClick={(e) => screenShare(e)}\n              >\n                {\" \"}\n                <i className=\"fa fa-desktop\"></i>{\" \"}\n              </button>\n            </div>\n            <div className=\"videobox\">\n\t\t\t\t\t\t\t<div className=\"video-container\">\n\t\t\t\t\t\t\t\t<p className=\"person-name\">\n\t\t\t\t\t\t\t\t\t{name} \n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<div className=\"video-style\">\n\t\t\t\t\t\t\t\t\t\t<StyledVideo className=\"video-room\" muted ref={userVideo} autoPlay playsInline />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n              {nearby.map((peer) => {\n                return (\n\t\t\t\t\t\t\t\t\t<div className=\"video-container-peer\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"person-name-peer\"> \n\t\t\t\t\t\t\t\t\t\t\t{peer.name}\t\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t<div className=\"video-style-peer\">\n\t\t\t\t\t\t\t\t\t\t\t<Video peer={peer.peerObj.peer} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n              })}\n            </div>\n            <Sketch setup={setup} draw={draw} className=\"canvas\" />\n          </div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2> Room ID: </h2>\n\t\t\t\t\t\t<h3> {roomID} </h3>\n          \t<Chat className=\"chat\" socket={socket} room={roomID} name={name} />\n\t\t\t\t\t</div>\n        </div>\n      ) : (\n        <RoomSetup\n          setJoinedRoom={() => setJoinedRoom(true)}\n          setMic={(preference) => setMic(preference)}\n          setCam={(preference) => setCam(preference)}\n          setName={(name) => setName(name)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Room;\n","/Users/shubhamkapoor/gather-video-chat/server/client/src/JoinRoom.js",["34","35"],"import React, { useState } from \"react\";\nimport \"./JoinRoom.css\";\nimport { v1 as uuid } from \"uuid\";\nimport io from \"socket.io-client\";\nimport e from \"cors\";\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nfunction JoinRoom(props) {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n\n  const joinRoom = (e) => {\n    e.preventDefault();\n    if (name === \"\" || room === \"\") {\n      alert(\"Please enter valid values\");\n      return;\n    }\n\n    document.getElementById(\"input-name\").value = \"\";\n    document.getElementById(\"input-room\").value = \"\";\n\n    props.history.push(`/room/${room}`);\n  };\n\n  const createRoom = (e) => {\n    e.preventDefault();\n    if (name === \"\") {\n      alert(\"Please enter a name\");\n      return;\n    }\n\n    document.getElementById(\"input-name\").value = \"\";\n    document.getElementById(\"input-room\").value = \"\";\n\n    const roomID = uuid();\n    props.history.push(`/room/${roomID}`);\n  };\n  return (\n    <div className=\"overAll\">\n      <div className=\"joinRoom\">\n        <h1 className=\"entryTitle\"> Enter Room Details </h1>\n        <input\n          id=\"input-name\"\n          type=\"text\"\n          placeholder=\"Enter Your Name...\"\n          onChange={(e) => setName(e.target.value)}\n        />\n        <input\n          id=\"input-room\"\n          type=\"text\"\n          placeholder=\"Enter Room ID...\"\n          onChange={(e) => setRoom(e.target.value)}\n        />\n        <button className=\"joinBtn\" type=\"submit\" onClick={(e) => joinRoom(e)}>\n          {\" \"}\n          Join a room{\" \"}\n        </button>\n        <div className=\"line\"></div>\n        <button className=\"createBtn\" onClick={(e) => createRoom(e)}>\n          {\" \"}\n          Create new room{\" \"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default JoinRoom;\n","/Users/shubhamkapoor/gather-video-chat/server/client/src/Chat.js",[],"/Users/shubhamkapoor/gather-video-chat/server/client/src/RoomSetup.js",[],{"ruleId":"36","severity":1,"message":"37","line":28,"column":6,"nodeType":"38","endLine":28,"endColumn":8,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":43,"column":9,"nodeType":"42","messageId":"43","endLine":43,"endColumn":19},{"ruleId":"36","severity":1,"message":"44","line":95,"column":6,"nodeType":"38","endLine":95,"endColumn":18,"suggestions":"45"},{"ruleId":"36","severity":1,"message":"46","line":155,"column":6,"nodeType":"38","endLine":155,"endColumn":14,"suggestions":"47"},{"ruleId":"40","severity":1,"message":"48","line":181,"column":9,"nodeType":"42","messageId":"43","endLine":181,"endColumn":24},{"ruleId":"40","severity":1,"message":"49","line":195,"column":9,"nodeType":"42","messageId":"43","endLine":195,"endColumn":13},{"ruleId":"40","severity":1,"message":"50","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":9},{"ruleId":"40","severity":1,"message":"51","line":7,"column":7,"nodeType":"42","messageId":"43","endLine":7,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.peer._remoteStreams'. Either include it or remove the dependency array.","ArrayExpression",["52"],"no-unused-vars","'trackPeers' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'cam', 'mic', 'name', 'nearby', and 'roomID'. Either include them or remove the dependency array.",["53"],"React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["54"],"'stopScreenShare' is assigned a value but never used.","'canv' is assigned a value but never used.","'e' is defined but never used.","'socket' is assigned a value but never used.",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},"Update the dependencies array to be: [props.peer._remoteStreams]",{"range":"61","text":"62"},"Update the dependencies array to be: [cam, joinedRoom, mic, name, nearby, roomID]",{"range":"63","text":"64"},"Update the dependencies array to be: []",{"range":"65","text":"66"},[861,863],"[props.peer._remoteStreams]",[2872,2884],"[cam, joinedRoom, mic, name, nearby, roomID]",[4262,4270],"[]"]